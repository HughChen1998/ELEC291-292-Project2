0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1069 (Apr 23 2015) (MSVC)
0000              4   ; This file was generated Tue Apr 03 14:03:59 2018
0000              5   ;--------------------------------------------------------
                  5   $name EFM8_I2C_Nunchuck
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _main
0000             27            public _serial
0000             28            public _nunchuck_getdata
0000             29            public _nunchuck_init
0000             30            public _I2C_stop
0000             31            public _I2C_start
0000             32            public _I2C_read
0000             33            public _I2C_write
0000             34            public _Timer4ms
0000             35            public _Timer2_ISR
0000             36            public __c51_external_startup
0000             37            public _nunchuck_init_PARM_1
0000             38            public _LCDprint_PARM_3
0000             39            public _LCDprint_PARM_2
0000             40            public _overflow_count
0000             41            public _c
0000             42            public _Timer3us
0000             43            public _waitms
0000             44            public _LCD_pulse
0000             45            public _LCD_byte
0000             46            public _WriteData
0000             47            public _WriteCommand
0000             48            public _LCD_4BIT
0000             49            public _LCDprint
0000             50   ;--------------------------------------------------------
0000             51   ; Special Function Registers
0000             52   ;--------------------------------------------------------
0000             53   _ACC            DATA 0xe0
0000             54   _ADC0ASAH       DATA 0xb6
0000             55   _ADC0ASAL       DATA 0xb5
0000             56   _ADC0ASCF       DATA 0xa1
0000             57   _ADC0ASCT       DATA 0xc7
0000             58   _ADC0CF0        DATA 0xbc
0000             59   _ADC0CF1        DATA 0xb9
0000             60   _ADC0CF2        DATA 0xdf
0000             61   _ADC0CN0        DATA 0xe8
0000             62   _ADC0CN1        DATA 0xb2
0000             63   _ADC0CN2        DATA 0xb3
0000             64   _ADC0GTH        DATA 0xc4
0000             65   _ADC0GTL        DATA 0xc3
0000             66   _ADC0H          DATA 0xbe
0000             67   _ADC0L          DATA 0xbd
0000             68   _ADC0LTH        DATA 0xc6
0000             69   _ADC0LTL        DATA 0xc5
0000             70   _ADC0MX         DATA 0xbb
0000             71   _B              DATA 0xf0
0000             72   _CKCON0         DATA 0x8e
0000             73   _CKCON1         DATA 0xa6
0000             74   _CLEN0          DATA 0xc6
0000             75   _CLIE0          DATA 0xc7
0000             76   _CLIF0          DATA 0xe8
0000             77   _CLKSEL         DATA 0xa9
0000             78   _CLOUT0         DATA 0xd1
0000             79   _CLU0CF         DATA 0xb1
0000             80   _CLU0FN         DATA 0xaf
0000             81   _CLU0MX         DATA 0x84
0000             82   _CLU1CF         DATA 0xb3
0000             83   _CLU1FN         DATA 0xb2
0000             84   _CLU1MX         DATA 0x85
0000             85   _CLU2CF         DATA 0xb6
0000             86   _CLU2FN         DATA 0xb5
0000             87   _CLU2MX         DATA 0x91
0000             88   _CLU3CF         DATA 0xbf
0000             89   _CLU3FN         DATA 0xbe
0000             90   _CLU3MX         DATA 0xae
0000             91   _CMP0CN0        DATA 0x9b
0000             92   _CMP0CN1        DATA 0x99
0000             93   _CMP0MD         DATA 0x9d
0000             94   _CMP0MX         DATA 0x9f
0000             95   _CMP1CN0        DATA 0xbf
0000             96   _CMP1CN1        DATA 0xac
0000             97   _CMP1MD         DATA 0xab
0000             98   _CMP1MX         DATA 0xaa
0000             99   _CRC0CN0        DATA 0xce
0000            100   _CRC0CN1        DATA 0x86
0000            101   _CRC0CNT        DATA 0xd3
0000            102   _CRC0DAT        DATA 0xcb
0000            103   _CRC0FLIP       DATA 0xcf
0000            104   _CRC0IN         DATA 0xca
0000            105   _CRC0ST         DATA 0xd2
0000            106   _DAC0CF0        DATA 0x91
0000            107   _DAC0CF1        DATA 0x92
0000            108   _DAC0H          DATA 0x85
0000            109   _DAC0L          DATA 0x84
0000            110   _DAC1CF0        DATA 0x93
0000            111   _DAC1CF1        DATA 0x94
0000            112   _DAC1H          DATA 0x8a
0000            113   _DAC1L          DATA 0x89
0000            114   _DAC2CF0        DATA 0x95
0000            115   _DAC2CF1        DATA 0x96
0000            116   _DAC2H          DATA 0x8c
0000            117   _DAC2L          DATA 0x8b
0000            118   _DAC3CF0        DATA 0x9a
0000            119   _DAC3CF1        DATA 0x9c
0000            120   _DAC3H          DATA 0x8e
0000            121   _DAC3L          DATA 0x8d
0000            122   _DACGCF0        DATA 0x88
0000            123   _DACGCF1        DATA 0x98
0000            124   _DACGCF2        DATA 0xa2
0000            125   _DERIVID        DATA 0xad
0000            126   _DEVICEID       DATA 0xb5
0000            127   _DPH            DATA 0x83
0000            128   _DPL            DATA 0x82
0000            129   _EIE1           DATA 0xe6
0000            130   _EIE2           DATA 0xf3
0000            131   _EIP1           DATA 0xbb
0000            132   _EIP1H          DATA 0xee
0000            133   _EIP2           DATA 0xed
0000            134   _EIP2H          DATA 0xf6
0000            135   _EMI0CN         DATA 0xe7
0000            136   _FLKEY          DATA 0xb7
0000            137   _HFO0CAL        DATA 0xc7
0000            138   _HFO1CAL        DATA 0xd6
0000            139   _HFOCN          DATA 0xef
0000            140   _I2C0ADM        DATA 0xff
0000            141   _I2C0CN0        DATA 0xba
0000            142   _I2C0DIN        DATA 0xbc
0000            143   _I2C0DOUT       DATA 0xbb
0000            144   _I2C0FCN0       DATA 0xad
0000            145   _I2C0FCN1       DATA 0xab
0000            146   _I2C0FCT        DATA 0xf5
0000            147   _I2C0SLAD       DATA 0xbd
0000            148   _I2C0STAT       DATA 0xb9
0000            149   _IE             DATA 0xa8
0000            150   _IP             DATA 0xb8
0000            151   _IPH            DATA 0xf2
0000            152   _IT01CF         DATA 0xe4
0000            153   _LFO0CN         DATA 0xb1
0000            154   _P0             DATA 0x80
0000            155   _P0MASK         DATA 0xfe
0000            156   _P0MAT          DATA 0xfd
0000            157   _P0MDIN         DATA 0xf1
0000            158   _P0MDOUT        DATA 0xa4
0000            159   _P0SKIP         DATA 0xd4
0000            160   _P1             DATA 0x90
0000            161   _P1MASK         DATA 0xee
0000            162   _P1MAT          DATA 0xed
0000            163   _P1MDIN         DATA 0xf2
0000            164   _P1MDOUT        DATA 0xa5
0000            165   _P1SKIP         DATA 0xd5
0000            166   _P2             DATA 0xa0
0000            167   _P2MASK         DATA 0xfc
0000            168   _P2MAT          DATA 0xfb
0000            169   _P2MDIN         DATA 0xf3
0000            170   _P2MDOUT        DATA 0xa6
0000            171   _P2SKIP         DATA 0xcc
0000            172   _P3             DATA 0xb0
0000            173   _P3MDIN         DATA 0xf4
0000            174   _P3MDOUT        DATA 0x9c
0000            175   _PCA0CENT       DATA 0x9e
0000            176   _PCA0CLR        DATA 0x9c
0000            177   _PCA0CN0        DATA 0xd8
0000            178   _PCA0CPH0       DATA 0xfc
0000            179   _PCA0CPH1       DATA 0xea
0000            180   _PCA0CPH2       DATA 0xec
0000            181   _PCA0CPH3       DATA 0xf5
0000            182   _PCA0CPH4       DATA 0x85
0000            183   _PCA0CPH5       DATA 0xde
0000            184   _PCA0CPL0       DATA 0xfb
0000            185   _PCA0CPL1       DATA 0xe9
0000            186   _PCA0CPL2       DATA 0xeb
0000            187   _PCA0CPL3       DATA 0xf4
0000            188   _PCA0CPL4       DATA 0x84
0000            189   _PCA0CPL5       DATA 0xdd
0000            190   _PCA0CPM0       DATA 0xda
0000            191   _PCA0CPM1       DATA 0xdb
0000            192   _PCA0CPM2       DATA 0xdc
0000            193   _PCA0CPM3       DATA 0xae
0000            194   _PCA0CPM4       DATA 0xaf
0000            195   _PCA0CPM5       DATA 0xcc
0000            196   _PCA0H          DATA 0xfa
0000            197   _PCA0L          DATA 0xf9
0000            198   _PCA0MD         DATA 0xd9
0000            199   _PCA0POL        DATA 0x96
0000            200   _PCA0PWM        DATA 0xf7
0000            201   _PCON0          DATA 0x87
0000            202   _PCON1          DATA 0xcd
0000            203   _PFE0CN         DATA 0xc1
0000            204   _PRTDRV         DATA 0xf6
0000            205   _PSCTL          DATA 0x8f
0000            206   _PSTAT0         DATA 0xaa
0000            207   _PSW            DATA 0xd0
0000            208   _REF0CN         DATA 0xd1
0000            209   _REG0CN         DATA 0xc9
0000            210   _REVID          DATA 0xb6
0000            211   _RSTSRC         DATA 0xef
0000            212   _SBCON1         DATA 0x94
0000            213   _SBRLH1         DATA 0x96
0000            214   _SBRLL1         DATA 0x95
0000            215   _SBUF           DATA 0x99
0000            216   _SBUF0          DATA 0x99
0000            217   _SBUF1          DATA 0x92
0000            218   _SCON           DATA 0x98
0000            219   _SCON0          DATA 0x98
0000            220   _SCON1          DATA 0xc8
0000            221   _SFRPAGE        DATA 0xa7
0000            222   _SFRPGCN        DATA 0xbc
0000            223   _SFRSTACK       DATA 0xd7
0000            224   _SMB0ADM        DATA 0xd6
0000            225   _SMB0ADR        DATA 0xd7
0000            226   _SMB0CF         DATA 0xc1
0000            227   _SMB0CN0        DATA 0xc0
0000            228   _SMB0DAT        DATA 0xc2
0000            229   _SMB0FCN0       DATA 0xc3
0000            230   _SMB0FCN1       DATA 0xc4
0000            231   _SMB0FCT        DATA 0xef
0000            232   _SMB0RXLN       DATA 0xc5
0000            233   _SMB0TC         DATA 0xac
0000            234   _SMOD1          DATA 0x93
0000            235   _SP             DATA 0x81
0000            236   _SPI0CFG        DATA 0xa1
0000            237   _SPI0CKR        DATA 0xa2
0000            238   _SPI0CN0        DATA 0xf8
0000            239   _SPI0DAT        DATA 0xa3
0000            240   _SPI0FCN0       DATA 0x9a
0000            241   _SPI0FCN1       DATA 0x9b
0000            242   _SPI0FCT        DATA 0xf7
0000            243   _SPI0PCF        DATA 0xdf
0000            244   _TCON           DATA 0x88
0000            245   _TH0            DATA 0x8c
0000            246   _TH1            DATA 0x8d
0000            247   _TL0            DATA 0x8a
0000            248   _TL1            DATA 0x8b
0000            249   _TMOD           DATA 0x89
0000            250   _TMR2CN0        DATA 0xc8
0000            251   _TMR2CN1        DATA 0xfd
0000            252   _TMR2H          DATA 0xcf
0000            253   _TMR2L          DATA 0xce
0000            254   _TMR2RLH        DATA 0xcb
0000            255   _TMR2RLL        DATA 0xca
0000            256   _TMR3CN0        DATA 0x91
0000            257   _TMR3CN1        DATA 0xfe
0000            258   _TMR3H          DATA 0x95
0000            259   _TMR3L          DATA 0x94
0000            260   _TMR3RLH        DATA 0x93
0000            261   _TMR3RLL        DATA 0x92
0000            262   _TMR4CN0        DATA 0x98
0000            263   _TMR4CN1        DATA 0xff
0000            264   _TMR4H          DATA 0xa5
0000            265   _TMR4L          DATA 0xa4
0000            266   _TMR4RLH        DATA 0xa3
0000            267   _TMR4RLL        DATA 0xa2
0000            268   _TMR5CN0        DATA 0xc0
0000            269   _TMR5CN1        DATA 0xf1
0000            270   _TMR5H          DATA 0xd5
0000            271   _TMR5L          DATA 0xd4
0000            272   _TMR5RLH        DATA 0xd3
0000            273   _TMR5RLL        DATA 0xd2
0000            274   _UART0PCF       DATA 0xd9
0000            275   _UART1FCN0      DATA 0x9d
0000            276   _UART1FCN1      DATA 0xd8
0000            277   _UART1FCT       DATA 0xfa
0000            278   _UART1LIN       DATA 0x9e
0000            279   _UART1PCF       DATA 0xda
0000            280   _VDM0CN         DATA 0xff
0000            281   _WDTCN          DATA 0x97
0000            282   _XBR0           DATA 0xe1
0000            283   _XBR1           DATA 0xe2
0000            284   _XBR2           DATA 0xe3
0000            285   _XOSC0CN        DATA 0x86
0000            286   _DPTR           DATA 0x8382
0000            287   _TMR2RL         DATA 0xcbca
0000            288   _TMR3RL         DATA 0x9392
0000            289   _TMR4RL         DATA 0xa3a2
0000            290   _TMR5RL         DATA 0xd3d2
0000            291   _TMR0           DATA 0x8c8a
0000            292   _TMR1           DATA 0x8d8b
0000            293   _TMR2           DATA 0xcfce
0000            294   _TMR3           DATA 0x9594
0000            295   _TMR4           DATA 0xa5a4
0000            296   _TMR5           DATA 0xd5d4
0000            297   _SBRL1          DATA 0x9695
0000            298   _PCA0           DATA 0xfaf9
0000            299   _PCA0CP0        DATA 0xfcfb
0000            300   _PCA0CP1        DATA 0xeae9
0000            301   _PCA0CP2        DATA 0xeceb
0000            302   _PCA0CP3        DATA 0xf5f4
0000            303   _PCA0CP4        DATA 0x8584
0000            304   _PCA0CP5        DATA 0xdedd
0000            305   _ADC0ASA        DATA 0xb6b5
0000            306   _ADC0GT         DATA 0xc4c3
0000            307   _ADC0           DATA 0xbebd
0000            308   _ADC0LT         DATA 0xc6c5
0000            309   _DAC0           DATA 0x8584
0000            310   _DAC1           DATA 0x8a89
0000            311   _DAC2           DATA 0x8c8b
0000            312   _DAC3           DATA 0x8e8d
0000            313   ;--------------------------------------------------------
0000            314   ; special function bits
0000            315   ;--------------------------------------------------------
0000            316   _ACC_0          BIT 0xe0
0000            317   _ACC_1          BIT 0xe1
0000            318   _ACC_2          BIT 0xe2
0000            319   _ACC_3          BIT 0xe3
0000            320   _ACC_4          BIT 0xe4
0000            321   _ACC_5          BIT 0xe5
0000            322   _ACC_6          BIT 0xe6
0000            323   _ACC_7          BIT 0xe7
0000            324   _TEMPE          BIT 0xe8
0000            325   _ADGN0          BIT 0xe9
0000            326   _ADGN1          BIT 0xea
0000            327   _ADWINT         BIT 0xeb
0000            328   _ADBUSY         BIT 0xec
0000            329   _ADINT          BIT 0xed
0000            330   _IPOEN          BIT 0xee
0000            331   _ADEN           BIT 0xef
0000            332   _B_0            BIT 0xf0
0000            333   _B_1            BIT 0xf1
0000            334   _B_2            BIT 0xf2
0000            335   _B_3            BIT 0xf3
0000            336   _B_4            BIT 0xf4
0000            337   _B_5            BIT 0xf5
0000            338   _B_6            BIT 0xf6
0000            339   _B_7            BIT 0xf7
0000            340   _C0FIF          BIT 0xe8
0000            341   _C0RIF          BIT 0xe9
0000            342   _C1FIF          BIT 0xea
0000            343   _C1RIF          BIT 0xeb
0000            344   _C2FIF          BIT 0xec
0000            345   _C2RIF          BIT 0xed
0000            346   _C3FIF          BIT 0xee
0000            347   _C3RIF          BIT 0xef
0000            348   _D1SRC0         BIT 0x88
0000            349   _D1SRC1         BIT 0x89
0000            350   _D1AMEN         BIT 0x8a
0000            351   _D01REFSL       BIT 0x8b
0000            352   _D3SRC0         BIT 0x8c
0000            353   _D3SRC1         BIT 0x8d
0000            354   _D3AMEN         BIT 0x8e
0000            355   _D23REFSL       BIT 0x8f
0000            356   _D0UDIS         BIT 0x98
0000            357   _D1UDIS         BIT 0x99
0000            358   _D2UDIS         BIT 0x9a
0000            359   _D3UDIS         BIT 0x9b
0000            360   _EX0            BIT 0xa8
0000            361   _ET0            BIT 0xa9
0000            362   _EX1            BIT 0xaa
0000            363   _ET1            BIT 0xab
0000            364   _ES0            BIT 0xac
0000            365   _ET2            BIT 0xad
0000            366   _ESPI0          BIT 0xae
0000            367   _EA             BIT 0xaf
0000            368   _PX0            BIT 0xb8
0000            369   _PT0            BIT 0xb9
0000            370   _PX1            BIT 0xba
0000            371   _PT1            BIT 0xbb
0000            372   _PS0            BIT 0xbc
0000            373   _PT2            BIT 0xbd
0000            374   _PSPI0          BIT 0xbe
0000            375   _P0_0           BIT 0x80
0000            376   _P0_1           BIT 0x81
0000            377   _P0_2           BIT 0x82
0000            378   _P0_3           BIT 0x83
0000            379   _P0_4           BIT 0x84
0000            380   _P0_5           BIT 0x85
0000            381   _P0_6           BIT 0x86
0000            382   _P0_7           BIT 0x87
0000            383   _P1_0           BIT 0x90
0000            384   _P1_1           BIT 0x91
0000            385   _P1_2           BIT 0x92
0000            386   _P1_3           BIT 0x93
0000            387   _P1_4           BIT 0x94
0000            388   _P1_5           BIT 0x95
0000            389   _P1_6           BIT 0x96
0000            390   _P1_7           BIT 0x97
0000            391   _P2_0           BIT 0xa0
0000            392   _P2_1           BIT 0xa1
0000            393   _P2_2           BIT 0xa2
0000            394   _P2_3           BIT 0xa3
0000            395   _P2_4           BIT 0xa4
0000            396   _P2_5           BIT 0xa5
0000            397   _P2_6           BIT 0xa6
0000            398   _P3_0           BIT 0xb0
0000            399   _P3_1           BIT 0xb1
0000            400   _P3_2           BIT 0xb2
0000            401   _P3_3           BIT 0xb3
0000            402   _P3_4           BIT 0xb4
0000            403   _P3_7           BIT 0xb7
0000            404   _CCF0           BIT 0xd8
0000            405   _CCF1           BIT 0xd9
0000            406   _CCF2           BIT 0xda
0000            407   _CCF3           BIT 0xdb
0000            408   _CCF4           BIT 0xdc
0000            409   _CCF5           BIT 0xdd
0000            410   _CR             BIT 0xde
0000            411   _CF             BIT 0xdf
0000            412   _PARITY         BIT 0xd0
0000            413   _F1             BIT 0xd1
0000            414   _OV             BIT 0xd2
0000            415   _RS0            BIT 0xd3
0000            416   _RS1            BIT 0xd4
0000            417   _F0             BIT 0xd5
0000            418   _AC             BIT 0xd6
0000            419   _CY             BIT 0xd7
0000            420   _RI             BIT 0x98
0000            421   _TI             BIT 0x99
0000            422   _RB8            BIT 0x9a
0000            423   _TB8            BIT 0x9b
0000            424   _REN            BIT 0x9c
0000            425   _CE             BIT 0x9d
0000            426   _SMODE          BIT 0x9e
0000            427   _RI1            BIT 0xc8
0000            428   _TI1            BIT 0xc9
0000            429   _RBX1           BIT 0xca
0000            430   _TBX1           BIT 0xcb
0000            431   _REN1           BIT 0xcc
0000            432   _PERR1          BIT 0xcd
0000            433   _OVR1           BIT 0xce
0000            434   _SI             BIT 0xc0
0000            435   _ACK            BIT 0xc1
0000            436   _ARBLOST        BIT 0xc2
0000            437   _ACKRQ          BIT 0xc3
0000            438   _STO            BIT 0xc4
0000            439   _STA            BIT 0xc5
0000            440   _TXMODE         BIT 0xc6
0000            441   _MASTER         BIT 0xc7
0000            442   _SPIEN          BIT 0xf8
0000            443   _TXNF           BIT 0xf9
0000            444   _NSSMD0         BIT 0xfa
0000            445   _NSSMD1         BIT 0xfb
0000            446   _RXOVRN         BIT 0xfc
0000            447   _MODF           BIT 0xfd
0000            448   _WCOL           BIT 0xfe
0000            449   _SPIF           BIT 0xff
0000            450   _IT0            BIT 0x88
0000            451   _IE0            BIT 0x89
0000            452   _IT1            BIT 0x8a
0000            453   _IE1            BIT 0x8b
0000            454   _TR0            BIT 0x8c
0000            455   _TF0            BIT 0x8d
0000            456   _TR1            BIT 0x8e
0000            457   _TF1            BIT 0x8f
0000            458   _T2XCLK0        BIT 0xc8
0000            459   _T2XCLK1        BIT 0xc9
0000            460   _TR2            BIT 0xca
0000            461   _T2SPLIT        BIT 0xcb
0000            462   _TF2CEN         BIT 0xcc
0000            463   _TF2LEN         BIT 0xcd
0000            464   _TF2L           BIT 0xce
0000            465   _TF2H           BIT 0xcf
0000            466   _T4XCLK0        BIT 0x98
0000            467   _T4XCLK1        BIT 0x99
0000            468   _TR4            BIT 0x9a
0000            469   _T4SPLIT        BIT 0x9b
0000            470   _TF4CEN         BIT 0x9c
0000            471   _TF4LEN         BIT 0x9d
0000            472   _TF4L           BIT 0x9e
0000            473   _TF4H           BIT 0x9f
0000            474   _T5XCLK0        BIT 0xc0
0000            475   _T5XCLK1        BIT 0xc1
0000            476   _TR5            BIT 0xc2
0000            477   _T5SPLIT        BIT 0xc3
0000            478   _TF5CEN         BIT 0xc4
0000            479   _TF5LEN         BIT 0xc5
0000            480   _TF5L           BIT 0xc6
0000            481   _TF5H           BIT 0xc7
0000            482   _RIE            BIT 0xd8
0000            483   _RXTO0          BIT 0xd9
0000            484   _RXTO1          BIT 0xda
0000            485   _RFRQ           BIT 0xdb
0000            486   _TIE            BIT 0xdc
0000            487   _TXHOLD         BIT 0xdd
0000            488   _TXNF1          BIT 0xde
0000            489   _TFRQ           BIT 0xdf
0000            490   ;--------------------------------------------------------
0000            491   ; overlayable register banks
0000            492   ;--------------------------------------------------------
0000            493            rbank0 segment data overlay
0000            494   ;--------------------------------------------------------
0000            495   ; internal ram data
0000            496   ;--------------------------------------------------------
0000            497            rseg R_DSEG
0000            498   _c:
0000            499            ds 1
0001            500   _overflow_count:
0001            501            ds 1
0002            502   _LCDprint_PARM_2:
0002            503            ds 1
0003            504   _nunchuck_init_buf_1_106:
0003            505            ds 6
0009            506   _main_x_1_116:
0009            507            ds 4
000D            508   _main_f_1_116:
000D            509            ds 4
0011            510   _main_rbuf_1_116:
0011            511            ds 6
0017            512   _main_joy_x_1_116:
0017            513            ds 2
0019            514   _main_joy_y_1_116:
0019            515            ds 2
001B            516   _main_off_x_1_116:
001B            517            ds 2
001D            518   _main_off_y_1_116:
001D            519            ds 2
001F            520   _main_acc_x_1_116:
001F            521            ds 2
0021            522   _main_acc_y_1_116:
0021            523            ds 2
0023            524   _main_acc_z_1_116:
0023            525            ds 2
0025            526   _main_magnitude_1_116:
0025            527            ds 2
0027            528   _main_konamiProg_1_116:
0027            529            ds 2
0029            530   _main_koldProg_1_116:
0029            531            ds 2
002B            532   _main_accelLoop_1_116:
002B            533            ds 2
002D            534   _main_sloc4_1_0:
002D            535            ds 4
0031            536   ;--------------------------------------------------------
0031            537   ; overlayable items in internal ram 
0031            538   ;--------------------------------------------------------
0000            539            rseg    R_OSEG
0000            540            rseg    R_OSEG
0000            541            rseg    R_OSEG
0000            542            rseg    R_OSEG
0000            543   ;--------------------------------------------------------
0000            544   ; indirectly addressable internal ram data
0000            545   ;--------------------------------------------------------
0000            546            rseg R_ISEG
0000            547   ;--------------------------------------------------------
0000            548   ; absolute internal ram data
0000            549   ;--------------------------------------------------------
0000            550            DSEG
0000            551   ;--------------------------------------------------------
0000            552   ; bit data
0000            553   ;--------------------------------------------------------
0000            554            rseg R_BSEG
0000            555   _LCDprint_PARM_3:
0000            556            DBIT    1
0001            557   _nunchuck_init_PARM_1:
0001            558            DBIT    1
0002            559   _main_but1_1_116:
0002            560            DBIT    1
0003            561   _main_but2_1_116:
0003            562            DBIT    1
0004            563   _main_signal_stream0_1_116:
0004            564            DBIT    1
0005            565   _main_signal_stream5_1_116:
0005            566            DBIT    1
0006            567   _main_signal_stream6_1_116:
0006            568            DBIT    1
0007            569   _main_signal_stream7_1_116:
0007            570            DBIT    1
0008            571   _main_signal_stream8_1_116:
0008            572            DBIT    1
0009            573   _main_konamiReady_1_116:
0009            574            DBIT    1
000A            575   _main_koldReady_1_116:
000A            576            DBIT    1
000B            577   _main_shakeDir_1_116:
000B            578            DBIT    1
000C            579   _main_sloc0_1_0:
000C            580            DBIT    1
000D            581   _main_sloc1_1_0:
000D            582            DBIT    1
000E            583   _main_sloc2_1_0:
000E            584            DBIT    1
000F            585   _main_sloc3_1_0:
000F            586            DBIT    1
0010            587   ;--------------------------------------------------------
0010            588   ; paged external ram data
0010            589   ;--------------------------------------------------------
0000            590            rseg R_PSEG
0000            591   ;--------------------------------------------------------
0000            592   ; external ram data
0000            593   ;--------------------------------------------------------
0000            594            rseg R_XSEG
0000            595   ;--------------------------------------------------------
0000            596   ; absolute external ram data
0000            597   ;--------------------------------------------------------
0000            598            XSEG
0000            599   ;--------------------------------------------------------
0000            600   ; external initialized ram data
0000            601   ;--------------------------------------------------------
0000            602            rseg R_IXSEG
0000            603            rseg R_HOME
0000            604            rseg R_GSINIT
0000            605            rseg R_CSEG
0000            606   ;--------------------------------------------------------
0000            607   ; Reset entry point and interrupt vectors
0000            608   ;--------------------------------------------------------
0000            609            CSEG at 0x0000
0000 020100     610            ljmp    _crt0
0023            611            CSEG at 0x0023
0023 020100     612            ljmp    _serial
002B            613            CSEG at 0x002b
002B 020100     614            ljmp    _Timer2_ISR
002E            615   ;--------------------------------------------------------
002E            616   ; global & static initialisations
002E            617   ;--------------------------------------------------------
0000            618            rseg R_HOME
0000            619            rseg R_GSINIT
0000            620            rseg R_GSINIT
0000            621   ;--------------------------------------------------------
0000            622   ; data variables initialization
0000            623   ;--------------------------------------------------------
0000            624            rseg R_DINIT
0000            625   ;        EFM8_I2C_Nunchuck.c:47: volatile char c  = 'z';
0000 75507A     626            mov     _c,#0x7A
0003            627            ; The linker places a 'ret' at the end of segment R_DINIT.
0003            628   ;--------------------------------------------------------
0003            629   ; code
0003            630   ;--------------------------------------------------------
0000            631            rseg R_CSEG
0000            632   ;------------------------------------------------------------
0000            633   ;Allocation info for local variables in function '_c51_external_startup'
0000            634   ;------------------------------------------------------------
0000            635   ;------------------------------------------------------------
0000            636   ;        EFM8_I2C_Nunchuck.c:50: char _c51_external_startup (void)
0000            637   ;        -----------------------------------------
0000            638   ;         function _c51_external_startup
0000            639   ;        -----------------------------------------
0000            640   __c51_external_startup:
0000            641            using   0
0000            642   ;        EFM8_I2C_Nunchuck.c:53: SFRPAGE = 0x00;
0000 75A700     643            mov     _SFRPAGE,#0x00
0003            644   ;        EFM8_I2C_Nunchuck.c:54: WDTCN = 0xDE;           //First key
0003 7597DE     645            mov     _WDTCN,#0xDE
0006            646   ;        EFM8_I2C_Nunchuck.c:55: WDTCN = 0xAD;           //Second key
0006 7597AD     647            mov     _WDTCN,#0xAD
0009            648   ;        EFM8_I2C_Nunchuck.c:57: VDM0CN=0x80;            // Enable VDD monitor
0009 75FF80     649            mov     _VDM0CN,#0x80
000C            650   ;        EFM8_I2C_Nunchuck.c:58: RSTSRC=0x02|0x04;       // Enable reset on missing clock detector and VDD
000C 75EF06     651            mov     _RSTSRC,#0x06
000F            652   ;        EFM8_I2C_Nunchuck.c:61: SFRPAGE = 0x10;
000F 75A710     653            mov     _SFRPAGE,#0x10
0012            654   ;        EFM8_I2C_Nunchuck.c:62: PFE0CN  = 0x10;         // SYSCLK < 50 MHz.
0012 75C110     655            mov     _PFE0CN,#0x10
0015            656   ;        EFM8_I2C_Nunchuck.c:63: SFRPAGE = 0x00;
0015 75A700     657            mov     _SFRPAGE,#0x00
0018            658   ;        EFM8_I2C_Nunchuck.c:80: CLKSEL = 0x00;
0018 75A900     659            mov     _CLKSEL,#0x00
001B            660   ;        EFM8_I2C_Nunchuck.c:81: CLKSEL = 0x00;
001B 75A900     661            mov     _CLKSEL,#0x00
001E            662   ;        EFM8_I2C_Nunchuck.c:82: while ((CLKSEL & 0x80) == 0);
001E            663   L002001?:
001E E5A9       664            mov     a,_CLKSEL
0020 30E738     665            jnb     acc.7,L002001?
0023            666   ;        EFM8_I2C_Nunchuck.c:83: CLKSEL = 0x07;
0023 75A907     667            mov     _CLKSEL,#0x07
0026            668   ;        EFM8_I2C_Nunchuck.c:84: CLKSEL = 0x07;
0026 75A907     669            mov     _CLKSEL,#0x07
0029            670   ;        EFM8_I2C_Nunchuck.c:85: while ((CLKSEL & 0x80) == 0);
0029            671   L002004?:
0029 E5A9       672            mov     a,_CLKSEL
002B 30E7B8     673            jnb     acc.7,L002004?
002E            674   ;        EFM8_I2C_Nunchuck.c:102: SCON0 = 0x10;
002E 759810     675            mov     _SCON0,#0x10
0031            676   ;        EFM8_I2C_Nunchuck.c:103: TH1 = 0x100-((SYSCLK/BAUDRATE)/(12L*2L));
0031 758DEF     677            mov     _TH1,#0xEF
0034            678   ;        EFM8_I2C_Nunchuck.c:104: TL1 = TH1;      // Init Timer1
0034 858D8B     679            mov     _TL1,_TH1
0037            680   ;        EFM8_I2C_Nunchuck.c:105: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0037 53890F     681            anl     _TMOD,#0x0F
003A            682   ;        EFM8_I2C_Nunchuck.c:106: TMOD |=  0x20;                       
003A 438920     683            orl     _TMOD,#0x20
003D            684   ;        EFM8_I2C_Nunchuck.c:107: TR1 = 1;       // START Timer1
003D D28E       685            setb    _TR1
003F            686   ;        EFM8_I2C_Nunchuck.c:108: TI = 1;        // Indicate TX0 ready
003F D299       687            setb    _TI
0041            688   ;        EFM8_I2C_Nunchuck.c:110: P2MDOUT|=0b_0000_0011;
0041 43A603     689            orl     _P2MDOUT,#0x03
0044            690   ;        EFM8_I2C_Nunchuck.c:111: P0MDOUT |= 0x10;               // Enable UART0 TX as push-pull output
0044 43A410     691            orl     _P0MDOUT,#0x10
0047            692   ;        EFM8_I2C_Nunchuck.c:112: XBR0 = 0b_0000_0101;   // Enable SMBus pins and UART pins P0.4(TX) and P0.5(RX)
0047 75E105     693            mov     _XBR0,#0x05
004A            694   ;        EFM8_I2C_Nunchuck.c:113: XBR1 = 0X00;
004A 75E200     695            mov     _XBR1,#0x00
004D            696   ;        EFM8_I2C_Nunchuck.c:114: XBR2 = 0x40; // Enable crossbar and weak pull-ups
004D 75E340     697            mov     _XBR2,#0x40
0050            698   ;        EFM8_I2C_Nunchuck.c:117: CKCON0 |= 0b_0000_0100; // Timer0 clock source = SYSCLK
0050 438E04     699            orl     _CKCON0,#0x04
0053            700   ;        EFM8_I2C_Nunchuck.c:118: TMOD &= 0xf0;  // Mask out timer 1 bits
0053 5389F0     701            anl     _TMOD,#0xF0
0056            702   ;        EFM8_I2C_Nunchuck.c:119: TMOD |= 0x02;  // Timer0 in 8-bit auto-reload mode
0056 438902     703            orl     _TMOD,#0x02
0059            704   ;        EFM8_I2C_Nunchuck.c:121: TL0 = TH0 = 256-(SYSCLK/SMB_FREQUENCY/3);
0059 758C60     705            mov     _TH0,#0x60
005C 758A60     706            mov     _TL0,#0x60
005F            707   ;        EFM8_I2C_Nunchuck.c:122: TR0 = 1; // Enable timer 0
005F D28C       708            setb    _TR0
0061            709   ;        EFM8_I2C_Nunchuck.c:125: SMB0CF = 0b_0101_1100; //INH | EXTHOLD | SMBTOE | SMBFTE ;
0061 75C15C     710            mov     _SMB0CF,#0x5C
0064            711   ;        EFM8_I2C_Nunchuck.c:126: SMB0CF |= 0b_1000_0000;  // Enable SMBus
0064 43C180     712            orl     _SMB0CF,#0x80
0067            713   ;        EFM8_I2C_Nunchuck.c:129: TMR2CN0=0x00;   // Stop Timer2; Clear TF2;
0067 75C800     714            mov     _TMR2CN0,#0x00
006A            715   ;        EFM8_I2C_Nunchuck.c:130: CKCON0|=0b_0001_0000;
006A 438E10     716            orl     _CKCON0,#0x10
006D            717   ;        EFM8_I2C_Nunchuck.c:131: TMR2RL=(-(SYSCLK/(2*DEFAULT_F))); // Initialize reload value
006D 75CAF4     718            mov     _TMR2RL,#0xF4
0070 75CBF9     719            mov     (_TMR2RL >> 8),#0xF9
0073            720   ;        EFM8_I2C_Nunchuck.c:132: TMR2=0xffff;   // Set to reload immediately
0073 75CEFF     721            mov     _TMR2,#0xFF
0076 75CFFF     722            mov     (_TMR2 >> 8),#0xFF
0079            723   ;        EFM8_I2C_Nunchuck.c:133: ET2=1;         // Enable Timer2 interrupts
0079 D2AD       724            setb    _ET2
007B            725   ;        EFM8_I2C_Nunchuck.c:134: TR2=1;         // Start Timer2
007B D2CA       726            setb    _TR2
007D            727   ;        EFM8_I2C_Nunchuck.c:136: return 0;
007D 758200     728            mov     dpl,#0x00
0080 22         729            ret
0081            730   ;------------------------------------------------------------
0081            731   ;Allocation info for local variables in function 'Timer2_ISR'
0081            732   ;------------------------------------------------------------
0081            733   ;------------------------------------------------------------
0081            734   ;        EFM8_I2C_Nunchuck.c:139: void Timer2_ISR (void) interrupt INTERRUPT_TIMER2
0081            735   ;        -----------------------------------------
0081            736   ;         function Timer2_ISR
0081            737   ;        -----------------------------------------
0081            738   _Timer2_ISR:
0081 C0D0       739            push    psw
0083 75D000     740            mov     psw,#0x00
0086            741   ;        EFM8_I2C_Nunchuck.c:141: TF2H = 0; // Clear Timer2 interrupt flag
0086 C2CF       742            clr     _TF2H
0088            743   ;        EFM8_I2C_Nunchuck.c:142: OUT0=!OUT0;
0088 B2A0       744            cpl     _P2_0
008A            745   ;        EFM8_I2C_Nunchuck.c:143: OUT1=!OUT0;
008A A2A0       746            mov     c,_P2_0
008C B3         747            cpl     c
008D 92A1       748            mov     _P2_1,c
008F D0D0       749            pop     psw
0091 32         750            reti
0092            751   ;        eliminated unneeded push/pop dpl
0092            752   ;        eliminated unneeded push/pop dph
0092            753   ;        eliminated unneeded push/pop b
0092            754   ;        eliminated unneeded push/pop acc
0092            755   ;------------------------------------------------------------
0092            756   ;Allocation info for local variables in function 'Timer3us'
0092            757   ;------------------------------------------------------------
0092            758   ;us                        Allocated to registers r2 
0092            759   ;i                         Allocated to registers r3 
0092            760   ;------------------------------------------------------------
0092            761   ;        EFM8_I2C_Nunchuck.c:148: void Timer3us(unsigned char us)
0092            762   ;        -----------------------------------------
0092            763   ;         function Timer3us
0092            764   ;        -----------------------------------------
0092            765   _Timer3us:
0092 AA82       766            mov     r2,dpl
0094            767   ;        EFM8_I2C_Nunchuck.c:153: CKCON0|=0b_0100_0000;
0094 438E40     768            orl     _CKCON0,#0x40
0097            769   ;        EFM8_I2C_Nunchuck.c:155: TMR3RL = (-(SYSCLK)/1000000L);         // Set Timer3 to overflow in 1us.
0097 7592D0     770            mov     _TMR3RL,#0xD0
009A 7593FF     771            mov     (_TMR3RL >> 8),#0xFF
009D            772   ;        EFM8_I2C_Nunchuck.c:156: TMR3 = TMR3RL;                         // Initialize Timer3 for first overflow
009D 859294     773            mov     _TMR3,_TMR3RL
00A0 859395     774            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
00A3            775   ;        EFM8_I2C_Nunchuck.c:158: TMR3CN0 = 0x04;                 // Start Timer3 and clear overflow flag
00A3 759104     776            mov     _TMR3CN0,#0x04
00A6            777   ;        EFM8_I2C_Nunchuck.c:159: for (i = 0; i < us; i++)               // Count <us> overflows
00A6 7B00       778            mov     r3,#0x00
00A8            779   L004006?:
00A8 C3         780            clr     c
00A9 EB         781            mov     a,r3
00AA 9A         782            subb    a,r2
00AB 5001       783            jnc     L004009?
00AD            784   ;        EFM8_I2C_Nunchuck.c:161: while (!(TMR3CN0 & 0x80));  // Wait for overflow
00AD            785   L004001?:
00AD E591       786            mov     a,_TMR3CN0
00AF 30E700     787            jnb     acc.7,L004001?
00B2            788   ;        EFM8_I2C_Nunchuck.c:162: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
00B2 53917F     789            anl     _TMR3CN0,#0x7F
00B5            790   ;        EFM8_I2C_Nunchuck.c:163: if (TF0)
00B5            791   ;        EFM8_I2C_Nunchuck.c:165: TF0=0;
00B5 108D40     792            jbc     _TF0,L004019?
00B8 8001       793            sjmp    L004008?
00BA            794   L004019?:
00BA            795   ;        EFM8_I2C_Nunchuck.c:166: overflow_count++;
00BA 0510       796            inc     _overflow_count
00BC            797   L004008?:
00BC            798   ;        EFM8_I2C_Nunchuck.c:159: for (i = 0; i < us; i++)               // Count <us> overflows
00BC 0B         799            inc     r3
00BD 8001       800            sjmp    L004006?
00BF            801   L004009?:
00BF            802   ;        EFM8_I2C_Nunchuck.c:169: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
00BF 759100     803            mov     _TMR3CN0,#0x00
00C2 22         804            ret
00C3            805   ;------------------------------------------------------------
00C3            806   ;Allocation info for local variables in function 'waitms'
00C3            807   ;------------------------------------------------------------
00C3            808   ;ms                        Allocated to registers r2 r3 
00C3            809   ;j                         Allocated to registers r4 r5 
00C3            810   ;k                         Allocated to registers r6 
00C3            811   ;------------------------------------------------------------
00C3            812   ;        EFM8_I2C_Nunchuck.c:172: void waitms (unsigned int ms)
00C3            813   ;        -----------------------------------------
00C3            814   ;         function waitms
00C3            815   ;        -----------------------------------------
00C3            816   _waitms:
00C3 AA82       817            mov     r2,dpl
00C5 AB83       818            mov     r3,dph
00C7            819   ;        EFM8_I2C_Nunchuck.c:176: for(j=0; j<ms; j++)
00C7 7C00       820            mov     r4,#0x00
00C9 7D00       821            mov     r5,#0x00
00CB            822   L005005?:
00CB C3         823            clr     c
00CC EC         824            mov     a,r4
00CD 9A         825            subb    a,r2
00CE ED         826            mov     a,r5
00CF 9B         827            subb    a,r3
00D0 5001       828            jnc     L005009?
00D2            829   ;        EFM8_I2C_Nunchuck.c:177: for (k=0; k<4; k++) Timer3us(250);
00D2 7E00       830            mov     r6,#0x00
00D4            831   L005001?:
00D4 BE04C0     832            cjne    r6,#0x04,L005018?
00D7            833   L005018?:
00D7 5001       834            jnc     L005007?
00D9 7582FA     835            mov     dpl,#0xFA
00DC C002       836            push    ar2
00DE C003       837            push    ar3
00E0 C004       838            push    ar4
00E2 C005       839            push    ar5
00E4 C006       840            push    ar6
00E6 120100     841            lcall   _Timer3us
00E9 D006       842            pop     ar6
00EB D005       843            pop     ar5
00ED D004       844            pop     ar4
00EF D003       845            pop     ar3
00F1 D002       846            pop     ar2
00F3 0E         847            inc     r6
00F4 8001       848            sjmp    L005001?
00F6            849   L005007?:
00F6            850   ;        EFM8_I2C_Nunchuck.c:176: for(j=0; j<ms; j++)
00F6 0C         851            inc     r4
00F7 BC0000     852            cjne    r4,#0x00,L005005?
00FA 0D         853            inc     r5
00FB 8001       854            sjmp    L005005?
00FD            855   L005009?:
00FD 22         856            ret
00FE            857   ;------------------------------------------------------------
00FE            858   ;Allocation info for local variables in function 'LCD_pulse'
00FE            859   ;------------------------------------------------------------
00FE            860   ;------------------------------------------------------------
00FE            861   ;        EFM8_I2C_Nunchuck.c:180: void LCD_pulse (void)
00FE            862   ;        -----------------------------------------
00FE            863   ;         function LCD_pulse
00FE            864   ;        -----------------------------------------
00FE            865   _LCD_pulse:
00FE            866   ;        EFM8_I2C_Nunchuck.c:182: LCD_E=1;
00FE D2A5       867            setb    _P2_5
0100            868   ;        EFM8_I2C_Nunchuck.c:183: Timer3us(40);
0100 758228     869            mov     dpl,#0x28
0103 120100     870            lcall   _Timer3us
0106            871   ;        EFM8_I2C_Nunchuck.c:184: LCD_E=0;
0106 C2A5       872            clr     _P2_5
0108 22         873            ret
0109            874   ;------------------------------------------------------------
0109            875   ;Allocation info for local variables in function 'LCD_byte'
0109            876   ;------------------------------------------------------------
0109            877   ;x                         Allocated to registers r2 
0109            878   ;------------------------------------------------------------
0109            879   ;        EFM8_I2C_Nunchuck.c:187: void LCD_byte (unsigned char x)
0109            880   ;        -----------------------------------------
0109            881   ;         function LCD_byte
0109            882   ;        -----------------------------------------
0109            883   _LCD_byte:
0109 AA82       884            mov     r2,dpl
010B            885   ;        EFM8_I2C_Nunchuck.c:190: ACC=x;                         //Send high nible
010B 8AE0       886            mov     _ACC,r2
010D            887   ;        EFM8_I2C_Nunchuck.c:191: LCD_D7=ACC_7;
010D A2E7       888            mov     c,_ACC_7
010F 92A1       889            mov     _P2_1,c
0111            890   ;        EFM8_I2C_Nunchuck.c:192: LCD_D6=ACC_6;
0111 A2E6       891            mov     c,_ACC_6
0113 92A2       892            mov     _P2_2,c
0115            893   ;        EFM8_I2C_Nunchuck.c:193: LCD_D5=ACC_5;
0115 A2E5       894            mov     c,_ACC_5
0117 92A3       895            mov     _P2_3,c
0119            896   ;        EFM8_I2C_Nunchuck.c:194: LCD_D4=ACC_4;
0119 A2E4       897            mov     c,_ACC_4
011B 92A4       898            mov     _P2_4,c
011D            899   ;        EFM8_I2C_Nunchuck.c:195: LCD_pulse();
011D C002       900            push    ar2
011F 120100     901            lcall   _LCD_pulse
0122            902   ;        EFM8_I2C_Nunchuck.c:196: Timer3us(40);
0122 758228     903            mov     dpl,#0x28
0125 120100     904            lcall   _Timer3us
0128 D002       905            pop     ar2
012A            906   ;        EFM8_I2C_Nunchuck.c:197: ACC=x;                         //Send low nible
012A 8AE0       907            mov     _ACC,r2
012C            908   ;        EFM8_I2C_Nunchuck.c:198: LCD_D7=ACC_3;
012C A2E3       909            mov     c,_ACC_3
012E 92A1       910            mov     _P2_1,c
0130            911   ;        EFM8_I2C_Nunchuck.c:199: LCD_D6=ACC_2;
0130 A2E2       912            mov     c,_ACC_2
0132 92A2       913            mov     _P2_2,c
0134            914   ;        EFM8_I2C_Nunchuck.c:200: LCD_D5=ACC_1;
0134 A2E1       915            mov     c,_ACC_1
0136 92A3       916            mov     _P2_3,c
0138            917   ;        EFM8_I2C_Nunchuck.c:201: LCD_D4=ACC_0;
0138 A2E0       918            mov     c,_ACC_0
013A 92A4       919            mov     _P2_4,c
013C            920   ;        EFM8_I2C_Nunchuck.c:202: LCD_pulse();
013C 020100     921            ljmp    _LCD_pulse
013F            922   ;------------------------------------------------------------
013F            923   ;Allocation info for local variables in function 'WriteData'
013F            924   ;------------------------------------------------------------
013F            925   ;x                         Allocated to registers 
013F            926   ;------------------------------------------------------------
013F            927   ;        EFM8_I2C_Nunchuck.c:205: void WriteData (unsigned char x)
013F            928   ;        -----------------------------------------
013F            929   ;         function WriteData
013F            930   ;        -----------------------------------------
013F            931   _WriteData:
013F            932   ;        EFM8_I2C_Nunchuck.c:207: LCD_RS=1;
013F D2A6       933            setb    _P2_6
0141            934   ;        EFM8_I2C_Nunchuck.c:208: LCD_byte(x);
0141 120100     935            lcall   _LCD_byte
0144            936   ;        EFM8_I2C_Nunchuck.c:209: waitms(2);
0144 900002     937            mov     dptr,#0x0002
0147 020100     938            ljmp    _waitms
014A            939   ;------------------------------------------------------------
014A            940   ;Allocation info for local variables in function 'WriteCommand'
014A            941   ;------------------------------------------------------------
014A            942   ;x                         Allocated to registers 
014A            943   ;------------------------------------------------------------
014A            944   ;        EFM8_I2C_Nunchuck.c:212: void WriteCommand (unsigned char x)
014A            945   ;        -----------------------------------------
014A            946   ;         function WriteCommand
014A            947   ;        -----------------------------------------
014A            948   _WriteCommand:
014A            949   ;        EFM8_I2C_Nunchuck.c:214: LCD_RS=0;
014A C2A6       950            clr     _P2_6
014C            951   ;        EFM8_I2C_Nunchuck.c:215: LCD_byte(x);
014C 120100     952            lcall   _LCD_byte
014F            953   ;        EFM8_I2C_Nunchuck.c:216: waitms(5);
014F 900005     954            mov     dptr,#0x0005
0152 020100     955            ljmp    _waitms
0155            956   ;------------------------------------------------------------
0155            957   ;Allocation info for local variables in function 'LCD_4BIT'
0155            958   ;------------------------------------------------------------
0155            959   ;------------------------------------------------------------
0155            960   ;        EFM8_I2C_Nunchuck.c:219: void LCD_4BIT (void)
0155            961   ;        -----------------------------------------
0155            962   ;         function LCD_4BIT
0155            963   ;        -----------------------------------------
0155            964   _LCD_4BIT:
0155            965   ;        EFM8_I2C_Nunchuck.c:221: LCD_E=0;               // Resting state of LCD's enable is zero
0155 C2A5       966            clr     _P2_5
0157            967   ;        EFM8_I2C_Nunchuck.c:223: waitms(20);
0157 900014     968            mov     dptr,#0x0014
015A 120100     969            lcall   _waitms
015D            970   ;        EFM8_I2C_Nunchuck.c:225: WriteCommand(0x33);
015D 758233     971            mov     dpl,#0x33
0160 120100     972            lcall   _WriteCommand
0163            973   ;        EFM8_I2C_Nunchuck.c:226: WriteCommand(0x33);
0163 758233     974            mov     dpl,#0x33
0166 120100     975            lcall   _WriteCommand
0169            976   ;        EFM8_I2C_Nunchuck.c:227: WriteCommand(0x32); // Change to 4-bit mode
0169 758232     977            mov     dpl,#0x32
016C 120100     978            lcall   _WriteCommand
016F            979   ;        EFM8_I2C_Nunchuck.c:230: WriteCommand(0x28);
016F 758228     980            mov     dpl,#0x28
0172 120100     981            lcall   _WriteCommand
0175            982   ;        EFM8_I2C_Nunchuck.c:231: WriteCommand(0x0c);
0175 75820C     983            mov     dpl,#0x0C
0178 120100     984            lcall   _WriteCommand
017B            985   ;        EFM8_I2C_Nunchuck.c:232: WriteCommand(0x01); // Clear screen command (takes some time)
017B 758201     986            mov     dpl,#0x01
017E 120100     987            lcall   _WriteCommand
0181            988   ;        EFM8_I2C_Nunchuck.c:233: waitms(20);            // Wait for clear screen command to finsih.
0181 900014     989            mov     dptr,#0x0014
0184 020100     990            ljmp    _waitms
0187            991   ;------------------------------------------------------------
0187            992   ;Allocation info for local variables in function 'LCDprint'
0187            993   ;------------------------------------------------------------
0187            994   ;line                      Allocated with name '_LCDprint_PARM_2'
0187            995   ;string                    Allocated to registers r2 r3 r4 
0187            996   ;j                         Allocated to registers r5 r6 
0187            997   ;------------------------------------------------------------
0187            998   ;        EFM8_I2C_Nunchuck.c:236: void LCDprint(char * string, unsigned char line, bit clear)
0187            999   ;        -----------------------------------------
0187           1000   ;         function LCDprint
0187           1001   ;        -----------------------------------------
0187           1002   _LCDprint:
0187 AA82      1003            mov     r2,dpl
0189 AB83      1004            mov     r3,dph
018B ACF0      1005            mov     r4,b
018D           1006   ;        EFM8_I2C_Nunchuck.c:240: WriteCommand(line==2?0xc0:0x80);
018D 7402      1007            mov     a,#0x02
018F B5D080    1008            cjne    a,_LCDprint_PARM_2,L011013?
0192 7DC0      1009            mov     r5,#0xC0
0194 8001      1010            sjmp    L011014?
0196           1011   L011013?:
0196 7D80      1012            mov     r5,#0x80
0198           1013   L011014?:
0198 8D82      1014            mov     dpl,r5
019A C002      1015            push    ar2
019C C003      1016            push    ar3
019E C004      1017            push    ar4
01A0 120100    1018            lcall   _WriteCommand
01A3           1019   ;        EFM8_I2C_Nunchuck.c:241: waitms(5);
01A3 900005    1020            mov     dptr,#0x0005
01A6 120100    1021            lcall   _waitms
01A9 D004      1022            pop     ar4
01AB D003      1023            pop     ar3
01AD D002      1024            pop     ar2
01AF           1025   ;        EFM8_I2C_Nunchuck.c:242: for(j=0; string[j]!=0; j++)    WriteData(string[j]);           // Write the message
01AF 7D00      1026            mov     r5,#0x00
01B1 7E00      1027            mov     r6,#0x00
01B3           1028   L011003?:
01B3 ED        1029            mov     a,r5
01B4 2A        1030            add     a,r2
01B5 FF        1031            mov     r7,a
01B6 EE        1032            mov     a,r6
01B7 3B        1033            addc    a,r3
01B8 F8        1034            mov     r0,a
01B9 8C01      1035            mov     ar1,r4
01BB 8F82      1036            mov     dpl,r7
01BD 8883      1037            mov     dph,r0
01BF 89F0      1038            mov     b,r1
01C1 120100    1039            lcall   __gptrget
01C4 FF        1040            mov     r7,a
01C5 6001      1041            jz      L011006?
01C7 8F82      1042            mov     dpl,r7
01C9 C002      1043            push    ar2
01CB C003      1044            push    ar3
01CD C004      1045            push    ar4
01CF C005      1046            push    ar5
01D1 C006      1047            push    ar6
01D3 120100    1048            lcall   _WriteData
01D6 D006      1049            pop     ar6
01D8 D005      1050            pop     ar5
01DA D004      1051            pop     ar4
01DC D003      1052            pop     ar3
01DE D002      1053            pop     ar2
01E0 0D        1054            inc     r5
01E1 BD0000    1055            cjne    r5,#0x00,L011003?
01E4 0E        1056            inc     r6
01E5 8001      1057            sjmp    L011003?
01E7           1058   L011006?:
01E7           1059   ;        EFM8_I2C_Nunchuck.c:243: if(clear) for(; j<CHARS_PER_LINE; j++) WriteData(' ');         // Clear the rest of the line
01E7 3080C0    1060            jnb     _LCDprint_PARM_3,L011011?
01EA 8D02      1061            mov     ar2,r5
01EC 8E03      1062            mov     ar3,r6
01EE           1063   L011007?:
01EE C3        1064            clr     c
01EF EA        1065            mov     a,r2
01F0 9410      1066            subb    a,#0x10
01F2 EB        1067            mov     a,r3
01F3 6480      1068            xrl     a,#0x80
01F5 9480      1069            subb    a,#0x80
01F7 5001      1070            jnc     L011011?
01F9 758220    1071            mov     dpl,#0x20
01FC C002      1072            push    ar2
01FE C003      1073            push    ar3
0200 120100    1074            lcall   _WriteData
0203 D003      1075            pop     ar3
0205 D002      1076            pop     ar2
0207 0A        1077            inc     r2
0208 BA0000    1078            cjne    r2,#0x00,L011007?
020B 0B        1079            inc     r3
020C 8001      1080            sjmp    L011007?
020E           1081   L011011?:
020E 22        1082            ret
020F           1083   ;------------------------------------------------------------
020F           1084   ;Allocation info for local variables in function 'Timer4ms'
020F           1085   ;------------------------------------------------------------
020F           1086   ;ms                        Allocated to registers r2 
020F           1087   ;i                         Allocated to registers r4 
020F           1088   ;k                         Allocated to registers r3 
020F           1089   ;------------------------------------------------------------
020F           1090   ;        EFM8_I2C_Nunchuck.c:249: void Timer4ms(unsigned char ms)
020F           1091   ;        -----------------------------------------
020F           1092   ;         function Timer4ms
020F           1093   ;        -----------------------------------------
020F           1094   _Timer4ms:
020F AA82      1095            mov     r2,dpl
0211           1096   ;        EFM8_I2C_Nunchuck.c:254: k=SFRPAGE;
0211 ABA7      1097            mov     r3,_SFRPAGE
0213           1098   ;        EFM8_I2C_Nunchuck.c:255: SFRPAGE=0x10;
0213 75A710    1099            mov     _SFRPAGE,#0x10
0216           1100   ;        EFM8_I2C_Nunchuck.c:257: CKCON1|=0b_0000_0001;
0216 43A601    1101            orl     _CKCON1,#0x01
0219           1102   ;        EFM8_I2C_Nunchuck.c:259: TMR4RL = 65536-(SYSCLK/1000L); // Set Timer4 to overflow in 1 ms.
0219 75A280    1103            mov     _TMR4RL,#0x80
021C 75A344    1104            mov     (_TMR4RL >> 8),#0x44
021F           1105   ;        EFM8_I2C_Nunchuck.c:260: TMR4 = TMR4RL;                 // Initialize Timer4 for first overflow
021F 85A2A4    1106            mov     _TMR4,_TMR4RL
0222 85A3A5    1107            mov     (_TMR4 >> 8),(_TMR4RL >> 8)
0225           1108   ;        EFM8_I2C_Nunchuck.c:262: TF4H=0;        // Clear overflow flag
0225 C29F      1109            clr     _TF4H
0227           1110   ;        EFM8_I2C_Nunchuck.c:263: TR4=1;         // Start Timer4
0227 D29A      1111            setb    _TR4
0229           1112   ;        EFM8_I2C_Nunchuck.c:264: for (i = 0; i < ms; i++)       // Count <ms> overflows
0229 7C00      1113            mov     r4,#0x00
022B           1114   L012004?:
022B C3        1115            clr     c
022C EC        1116            mov     a,r4
022D 9A        1117            subb    a,r2
022E 5001      1118            jnc     L012007?
0230           1119   ;        EFM8_I2C_Nunchuck.c:266: while (!TF4H);  // Wait for overflow
0230           1120   L012001?:
0230           1121   ;        EFM8_I2C_Nunchuck.c:267: TF4H=0;         // Clear overflow indicator
0230 109F00    1122            jbc     _TF4H,L012015?
0233 8001      1123            sjmp    L012001?
0235           1124   L012015?:
0235           1125   ;        EFM8_I2C_Nunchuck.c:264: for (i = 0; i < ms; i++)       // Count <ms> overflows
0235 0C        1126            inc     r4
0236 8001      1127            sjmp    L012004?
0238           1128   L012007?:
0238           1129   ;        EFM8_I2C_Nunchuck.c:269: TR4=0;                 // Stop Timer4
0238 C29A      1130            clr     _TR4
023A           1131   ;        EFM8_I2C_Nunchuck.c:270: SFRPAGE=k;     
023A 8BA7      1132            mov     _SFRPAGE,r3
023C 22        1133            ret
023D           1134   ;------------------------------------------------------------
023D           1135   ;Allocation info for local variables in function 'I2C_write'
023D           1136   ;------------------------------------------------------------
023D           1137   ;output_data               Allocated to registers 
023D           1138   ;------------------------------------------------------------
023D           1139   ;        EFM8_I2C_Nunchuck.c:273: void I2C_write (unsigned char output_data)
023D           1140   ;        -----------------------------------------
023D           1141   ;         function I2C_write
023D           1142   ;        -----------------------------------------
023D           1143   _I2C_write:
023D 8582C2    1144            mov     _SMB0DAT,dpl
0240           1145   ;        EFM8_I2C_Nunchuck.c:276: SI = 0;
0240 C2C0      1146            clr     _SI
0242           1147   ;        EFM8_I2C_Nunchuck.c:277: while (!SI);                   // Wait until done with send
0242           1148   L013001?:
0242 30C040    1149            jnb     _SI,L013001?
0245 22        1150            ret
0246           1151   ;------------------------------------------------------------
0246           1152   ;Allocation info for local variables in function 'I2C_read'
0246           1153   ;------------------------------------------------------------
0246           1154   ;input_data                Allocated to registers 
0246           1155   ;------------------------------------------------------------
0246           1156   ;        EFM8_I2C_Nunchuck.c:280: unsigned char I2C_read (void)
0246           1157   ;        -----------------------------------------
0246           1158   ;         function I2C_read
0246           1159   ;        -----------------------------------------
0246           1160   _I2C_read:
0246           1161   ;        EFM8_I2C_Nunchuck.c:284: SI = 0;
0246 C2C0      1162            clr     _SI
0248           1163   ;        EFM8_I2C_Nunchuck.c:285: while (!SI);                   // Wait until we have data to read
0248           1164   L014001?:
0248 30C080    1165            jnb     _SI,L014001?
024B           1166   ;        EFM8_I2C_Nunchuck.c:286: input_data = SMB0DAT;          // Read the data
024B 85C282    1167            mov     dpl,_SMB0DAT
024E           1168   ;        EFM8_I2C_Nunchuck.c:288: return input_data;
024E 22        1169            ret
024F           1170   ;------------------------------------------------------------
024F           1171   ;Allocation info for local variables in function 'I2C_start'
024F           1172   ;------------------------------------------------------------
024F           1173   ;------------------------------------------------------------
024F           1174   ;        EFM8_I2C_Nunchuck.c:291: void I2C_start (void)
024F           1175   ;        -----------------------------------------
024F           1176   ;         function I2C_start
024F           1177   ;        -----------------------------------------
024F           1178   _I2C_start:
024F           1179   ;        EFM8_I2C_Nunchuck.c:293: ACK = 1;
024F D2C1      1180            setb    _ACK
0251           1181   ;        EFM8_I2C_Nunchuck.c:294: STA = 1;     // Send I2C start
0251 D2C5      1182            setb    _STA
0253           1183   ;        EFM8_I2C_Nunchuck.c:295: STO = 0;
0253 C2C4      1184            clr     _STO
0255           1185   ;        EFM8_I2C_Nunchuck.c:296: SI = 0;
0255 C2C0      1186            clr     _SI
0257           1187   ;        EFM8_I2C_Nunchuck.c:297: while (!SI); // Wait until start sent
0257           1188   L015001?:
0257 30C0C0    1189            jnb     _SI,L015001?
025A           1190   ;        EFM8_I2C_Nunchuck.c:298: STA = 0;     // Reset I2C start
025A C2C5      1191            clr     _STA
025C 22        1192            ret
025D           1193   ;------------------------------------------------------------
025D           1194   ;Allocation info for local variables in function 'I2C_stop'
025D           1195   ;------------------------------------------------------------
025D           1196   ;------------------------------------------------------------
025D           1197   ;        EFM8_I2C_Nunchuck.c:301: void I2C_stop(void)
025D           1198   ;        -----------------------------------------
025D           1199   ;         function I2C_stop
025D           1200   ;        -----------------------------------------
025D           1201   _I2C_stop:
025D           1202   ;        EFM8_I2C_Nunchuck.c:303: STO = 1;               // Perform I2C stop
025D D2C4      1203            setb    _STO
025F           1204   ;        EFM8_I2C_Nunchuck.c:304: SI = 0;                        // Clear SI
025F C2C0      1205            clr     _SI
0261 22        1206            ret
0262           1207   ;------------------------------------------------------------
0262           1208   ;Allocation info for local variables in function 'nunchuck_init'
0262           1209   ;------------------------------------------------------------
0262           1210   ;i                         Allocated to registers r2 
0262           1211   ;buf                       Allocated with name '_nunchuck_init_buf_1_106'
0262           1212   ;------------------------------------------------------------
0262           1213   ;        EFM8_I2C_Nunchuck.c:308: void nunchuck_init(bit print_extension_type)
0262           1214   ;        -----------------------------------------
0262           1215   ;         function nunchuck_init
0262           1216   ;        -----------------------------------------
0262           1217   _nunchuck_init:
0262           1218   ;        EFM8_I2C_Nunchuck.c:313: I2C_start();
0262 120100    1219            lcall   _I2C_start
0265           1220   ;        EFM8_I2C_Nunchuck.c:314: I2C_write(0xA4);
0265 7582A4    1221            mov     dpl,#0xA4
0268 120100    1222            lcall   _I2C_write
026B           1223   ;        EFM8_I2C_Nunchuck.c:315: I2C_write(0xF0);
026B 7582F0    1224            mov     dpl,#0xF0
026E 120100    1225            lcall   _I2C_write
0271           1226   ;        EFM8_I2C_Nunchuck.c:316: I2C_write(0x55);
0271 758255    1227            mov     dpl,#0x55
0274 120100    1228            lcall   _I2C_write
0277           1229   ;        EFM8_I2C_Nunchuck.c:317: I2C_stop();
0277 120100    1230            lcall   _I2C_stop
027A           1231   ;        EFM8_I2C_Nunchuck.c:318: Timer4ms(1);
027A 758201    1232            mov     dpl,#0x01
027D 120100    1233            lcall   _Timer4ms
0280           1234   ;        EFM8_I2C_Nunchuck.c:320: I2C_start();
0280 120100    1235            lcall   _I2C_start
0283           1236   ;        EFM8_I2C_Nunchuck.c:321: I2C_write(0xA4);
0283 7582A4    1237            mov     dpl,#0xA4
0286 120100    1238            lcall   _I2C_write
0289           1239   ;        EFM8_I2C_Nunchuck.c:322: I2C_write(0xFB);
0289 7582FB    1240            mov     dpl,#0xFB
028C 120100    1241            lcall   _I2C_write
028F           1242   ;        EFM8_I2C_Nunchuck.c:323: I2C_write(0x00);
028F 758200    1243            mov     dpl,#0x00
0292 120100    1244            lcall   _I2C_write
0295           1245   ;        EFM8_I2C_Nunchuck.c:324: I2C_stop();
0295 120100    1246            lcall   _I2C_stop
0298           1247   ;        EFM8_I2C_Nunchuck.c:325: Timer4ms(1);
0298 758201    1248            mov     dpl,#0x01
029B 120100    1249            lcall   _Timer4ms
029E           1250   ;        EFM8_I2C_Nunchuck.c:329: I2C_start();
029E 120100    1251            lcall   _I2C_start
02A1           1252   ;        EFM8_I2C_Nunchuck.c:330: I2C_write(0xA4);
02A1 7582A4    1253            mov     dpl,#0xA4
02A4 120100    1254            lcall   _I2C_write
02A7           1255   ;        EFM8_I2C_Nunchuck.c:331: I2C_write(0xFA);       // extension type register
02A7 7582FA    1256            mov     dpl,#0xFA
02AA 120100    1257            lcall   _I2C_write
02AD           1258   ;        EFM8_I2C_Nunchuck.c:332: I2C_stop();
02AD 120100    1259            lcall   _I2C_stop
02B0           1260   ;        EFM8_I2C_Nunchuck.c:333: Timer4ms(3);           // 3 ms required to complete acquisition
02B0 758203    1261            mov     dpl,#0x03
02B3 120100    1262            lcall   _Timer4ms
02B6           1263   ;        EFM8_I2C_Nunchuck.c:335: I2C_start();
02B6 120100    1264            lcall   _I2C_start
02B9           1265   ;        EFM8_I2C_Nunchuck.c:336: I2C_write(0xA5);
02B9 7582A5    1266            mov     dpl,#0xA5
02BC 120100    1267            lcall   _I2C_write
02BF           1268   ;        EFM8_I2C_Nunchuck.c:339: for(i=0; i<6; i++)
02BF 7A00      1269            mov     r2,#0x00
02C1           1270   L017001?:
02C1 BA0640    1271            cjne    r2,#0x06,L017010?
02C4           1272   L017010?:
02C4 5001      1273            jnc     L017004?
02C6           1274   ;        EFM8_I2C_Nunchuck.c:341: buf[i]=I2C_read();
02C6 EA        1275            mov     a,r2
02C7 2418      1276            add     a,#_nunchuck_init_buf_1_106
02C9 F8        1277            mov     r0,a
02CA C002      1278            push    ar2
02CC C000      1279            push    ar0
02CE 120100    1280            lcall   _I2C_read
02D1 E582      1281            mov     a,dpl
02D3 D000      1282            pop     ar0
02D5 D002      1283            pop     ar2
02D7 F6        1284            mov     @r0,a
02D8           1285   ;        EFM8_I2C_Nunchuck.c:339: for(i=0; i<6; i++)
02D8 0A        1286            inc     r2
02D9 8001      1287            sjmp    L017001?
02DB           1288   L017004?:
02DB           1289   ;        EFM8_I2C_Nunchuck.c:343: ACK=0;
02DB C2C1      1290            clr     _ACK
02DD           1291   ;        EFM8_I2C_Nunchuck.c:344: I2C_stop();
02DD 120100    1292            lcall   _I2C_stop
02E0           1293   ;        EFM8_I2C_Nunchuck.c:345: Timer4ms(3);
02E0 758203    1294            mov     dpl,#0x03
02E3 120100    1295            lcall   _Timer4ms
02E6           1296   ;        EFM8_I2C_Nunchuck.c:355: I2C_start();
02E6 120100    1297            lcall   _I2C_start
02E9           1298   ;        EFM8_I2C_Nunchuck.c:356: I2C_write(0xA4);
02E9 7582A4    1299            mov     dpl,#0xA4
02EC 120100    1300            lcall   _I2C_write
02EF           1301   ;        EFM8_I2C_Nunchuck.c:357: I2C_write(0xF0);
02EF 7582F0    1302            mov     dpl,#0xF0
02F2 120100    1303            lcall   _I2C_write
02F5           1304   ;        EFM8_I2C_Nunchuck.c:358: I2C_write(0xAA);
02F5 7582AA    1305            mov     dpl,#0xAA
02F8 120100    1306            lcall   _I2C_write
02FB           1307   ;        EFM8_I2C_Nunchuck.c:359: I2C_stop();
02FB 120100    1308            lcall   _I2C_stop
02FE           1309   ;        EFM8_I2C_Nunchuck.c:360: Timer4ms(1);
02FE 758201    1310            mov     dpl,#0x01
0301 120100    1311            lcall   _Timer4ms
0304           1312   ;        EFM8_I2C_Nunchuck.c:362: I2C_start();
0304 120100    1313            lcall   _I2C_start
0307           1314   ;        EFM8_I2C_Nunchuck.c:363: I2C_write(0xA4);
0307 7582A4    1315            mov     dpl,#0xA4
030A 120100    1316            lcall   _I2C_write
030D           1317   ;        EFM8_I2C_Nunchuck.c:364: I2C_write(0x40);
030D 758240    1318            mov     dpl,#0x40
0310 120100    1319            lcall   _I2C_write
0313           1320   ;        EFM8_I2C_Nunchuck.c:365: I2C_write(0x00);
0313 758200    1321            mov     dpl,#0x00
0316 120100    1322            lcall   _I2C_write
0319           1323   ;        EFM8_I2C_Nunchuck.c:366: I2C_write(0x00);
0319 758200    1324            mov     dpl,#0x00
031C 120100    1325            lcall   _I2C_write
031F           1326   ;        EFM8_I2C_Nunchuck.c:367: I2C_write(0x00);
031F 758200    1327            mov     dpl,#0x00
0322 120100    1328            lcall   _I2C_write
0325           1329   ;        EFM8_I2C_Nunchuck.c:368: I2C_write(0x00);
0325 758200    1330            mov     dpl,#0x00
0328 120100    1331            lcall   _I2C_write
032B           1332   ;        EFM8_I2C_Nunchuck.c:369: I2C_write(0x00);
032B 758200    1333            mov     dpl,#0x00
032E 120100    1334            lcall   _I2C_write
0331           1335   ;        EFM8_I2C_Nunchuck.c:370: I2C_write(0x00);
0331 758200    1336            mov     dpl,#0x00
0334 120100    1337            lcall   _I2C_write
0337           1338   ;        EFM8_I2C_Nunchuck.c:371: I2C_stop();
0337 120100    1339            lcall   _I2C_stop
033A           1340   ;        EFM8_I2C_Nunchuck.c:372: Timer4ms(1);
033A 758201    1341            mov     dpl,#0x01
033D 120100    1342            lcall   _Timer4ms
0340           1343   ;        EFM8_I2C_Nunchuck.c:374: I2C_start();
0340 120100    1344            lcall   _I2C_start
0343           1345   ;        EFM8_I2C_Nunchuck.c:375: I2C_write(0xA4);
0343 7582A4    1346            mov     dpl,#0xA4
0346 120100    1347            lcall   _I2C_write
0349           1348   ;        EFM8_I2C_Nunchuck.c:376: I2C_write(0x40);
0349 758240    1349            mov     dpl,#0x40
034C 120100    1350            lcall   _I2C_write
034F           1351   ;        EFM8_I2C_Nunchuck.c:377: I2C_write(0x00);
034F 758200    1352            mov     dpl,#0x00
0352 120100    1353            lcall   _I2C_write
0355           1354   ;        EFM8_I2C_Nunchuck.c:378: I2C_write(0x00);
0355 758200    1355            mov     dpl,#0x00
0358 120100    1356            lcall   _I2C_write
035B           1357   ;        EFM8_I2C_Nunchuck.c:379: I2C_write(0x00);
035B 758200    1358            mov     dpl,#0x00
035E 120100    1359            lcall   _I2C_write
0361           1360   ;        EFM8_I2C_Nunchuck.c:380: I2C_write(0x00);
0361 758200    1361            mov     dpl,#0x00
0364 120100    1362            lcall   _I2C_write
0367           1363   ;        EFM8_I2C_Nunchuck.c:381: I2C_write(0x00);
0367 758200    1364            mov     dpl,#0x00
036A 120100    1365            lcall   _I2C_write
036D           1366   ;        EFM8_I2C_Nunchuck.c:382: I2C_write(0x00);
036D 758200    1367            mov     dpl,#0x00
0370 120100    1368            lcall   _I2C_write
0373           1369   ;        EFM8_I2C_Nunchuck.c:383: I2C_stop();
0373 120100    1370            lcall   _I2C_stop
0376           1371   ;        EFM8_I2C_Nunchuck.c:384: Timer4ms(1);
0376 758201    1372            mov     dpl,#0x01
0379 120100    1373            lcall   _Timer4ms
037C           1374   ;        EFM8_I2C_Nunchuck.c:386: I2C_start();
037C 120100    1375            lcall   _I2C_start
037F           1376   ;        EFM8_I2C_Nunchuck.c:387: I2C_write(0xA4);
037F 7582A4    1377            mov     dpl,#0xA4
0382 120100    1378            lcall   _I2C_write
0385           1379   ;        EFM8_I2C_Nunchuck.c:388: I2C_write(0x40);
0385 758240    1380            mov     dpl,#0x40
0388 120100    1381            lcall   _I2C_write
038B           1382   ;        EFM8_I2C_Nunchuck.c:389: I2C_write(0x00);
038B 758200    1383            mov     dpl,#0x00
038E 120100    1384            lcall   _I2C_write
0391           1385   ;        EFM8_I2C_Nunchuck.c:390: I2C_write(0x00);
0391 758200    1386            mov     dpl,#0x00
0394 120100    1387            lcall   _I2C_write
0397           1388   ;        EFM8_I2C_Nunchuck.c:391: I2C_write(0x00);
0397 758200    1389            mov     dpl,#0x00
039A 120100    1390            lcall   _I2C_write
039D           1391   ;        EFM8_I2C_Nunchuck.c:392: I2C_write(0x00);
039D 758200    1392            mov     dpl,#0x00
03A0 120100    1393            lcall   _I2C_write
03A3           1394   ;        EFM8_I2C_Nunchuck.c:393: I2C_stop();
03A3 120100    1395            lcall   _I2C_stop
03A6           1396   ;        EFM8_I2C_Nunchuck.c:394: Timer4ms(1);
03A6 758201    1397            mov     dpl,#0x01
03A9 020100    1398            ljmp    _Timer4ms
03AC           1399   ;------------------------------------------------------------
03AC           1400   ;Allocation info for local variables in function 'nunchuck_getdata'
03AC           1401   ;------------------------------------------------------------
03AC           1402   ;s                         Allocated to registers r2 r3 r4 
03AC           1403   ;i                         Allocated to registers r5 
03AC           1404   ;------------------------------------------------------------
03AC           1405   ;        EFM8_I2C_Nunchuck.c:397: void nunchuck_getdata(unsigned char * s)
03AC           1406   ;        -----------------------------------------
03AC           1407   ;         function nunchuck_getdata
03AC           1408   ;        -----------------------------------------
03AC           1409   _nunchuck_getdata:
03AC AA82      1410            mov     r2,dpl
03AE AB83      1411            mov     r3,dph
03B0 ACF0      1412            mov     r4,b
03B2           1413   ;        EFM8_I2C_Nunchuck.c:402: I2C_start();
03B2 C002      1414            push    ar2
03B4 C003      1415            push    ar3
03B6 C004      1416            push    ar4
03B8 120100    1417            lcall   _I2C_start
03BB           1418   ;        EFM8_I2C_Nunchuck.c:403: I2C_write(0xA4);
03BB 7582A4    1419            mov     dpl,#0xA4
03BE 120100    1420            lcall   _I2C_write
03C1           1421   ;        EFM8_I2C_Nunchuck.c:404: I2C_write(0x00);
03C1 758200    1422            mov     dpl,#0x00
03C4 120100    1423            lcall   _I2C_write
03C7           1424   ;        EFM8_I2C_Nunchuck.c:405: I2C_stop();
03C7 120100    1425            lcall   _I2C_stop
03CA           1426   ;        EFM8_I2C_Nunchuck.c:406: Timer4ms(3);   // 3 ms required to complete acquisition
03CA 758203    1427            mov     dpl,#0x03
03CD 120100    1428            lcall   _Timer4ms
03D0           1429   ;        EFM8_I2C_Nunchuck.c:409: I2C_start();
03D0 120100    1430            lcall   _I2C_start
03D3           1431   ;        EFM8_I2C_Nunchuck.c:410: I2C_write(0xA5);
03D3 7582A5    1432            mov     dpl,#0xA5
03D6 120100    1433            lcall   _I2C_write
03D9 D004      1434            pop     ar4
03DB D003      1435            pop     ar3
03DD D002      1436            pop     ar2
03DF           1437   ;        EFM8_I2C_Nunchuck.c:413: for(i=0; i<6; i++)
03DF 7D00      1438            mov     r5,#0x00
03E1           1439   L018001?:
03E1 BD0600    1440            cjne    r5,#0x06,L018010?
03E4           1441   L018010?:
03E4 5001      1442            jnc     L018004?
03E6           1443   ;        EFM8_I2C_Nunchuck.c:415: s[i]=(I2C_read()^0x17)+0x17; // Read and decrypt
03E6 ED        1444            mov     a,r5
03E7 2A        1445            add     a,r2
03E8 FE        1446            mov     r6,a
03E9 E4        1447            clr     a
03EA 3B        1448            addc    a,r3
03EB FF        1449            mov     r7,a
03EC 8C00      1450            mov     ar0,r4
03EE C002      1451            push    ar2
03F0 C003      1452            push    ar3
03F2 C004      1453            push    ar4
03F4 C005      1454            push    ar5
03F6 C006      1455            push    ar6
03F8 C007      1456            push    ar7
03FA C000      1457            push    ar0
03FC 120100    1458            lcall   _I2C_read
03FF E582      1459            mov     a,dpl
0401 D000      1460            pop     ar0
0403 D007      1461            pop     ar7
0405 D006      1462            pop     ar6
0407 D005      1463            pop     ar5
0409 D004      1464            pop     ar4
040B D003      1465            pop     ar3
040D D002      1466            pop     ar2
040F 6417      1467            xrl     a,#0x17
0411 2417      1468            add     a,#0x17
0413 F9        1469            mov     r1,a
0414 8E82      1470            mov     dpl,r6
0416 8F83      1471            mov     dph,r7
0418 88F0      1472            mov     b,r0
041A 120100    1473            lcall   __gptrput
041D           1474   ;        EFM8_I2C_Nunchuck.c:413: for(i=0; i<6; i++)
041D 0D        1475            inc     r5
041E 8001      1476            sjmp    L018001?
0420           1477   L018004?:
0420           1478   ;        EFM8_I2C_Nunchuck.c:417: ACK=0;
0420 C2C1      1479            clr     _ACK
0422           1480   ;        EFM8_I2C_Nunchuck.c:418: I2C_stop();
0422 020100    1481            ljmp    _I2C_stop
0425           1482   ;------------------------------------------------------------
0425           1483   ;Allocation info for local variables in function 'serial'
0425           1484   ;------------------------------------------------------------
0425           1485   ;------------------------------------------------------------
0425           1486   ;        EFM8_I2C_Nunchuck.c:422: void serial (void) interrupt 4{
0425           1487   ;        -----------------------------------------
0425           1488   ;         function serial
0425           1489   ;        -----------------------------------------
0425           1490   _serial:
0425           1491   ;        EFM8_I2C_Nunchuck.c:423: if(RI == 1){
0425           1492   ;        EFM8_I2C_Nunchuck.c:424: RI = 0;
0425 1098C0    1493            jbc     _RI,L019006?
0428 8001      1494            sjmp    L019003?
042A           1495   L019006?:
042A           1496   ;        EFM8_I2C_Nunchuck.c:425: SFRPAGE = 0x20;
042A 75A720    1497            mov     _SFRPAGE,#0x20
042D           1498   ;        EFM8_I2C_Nunchuck.c:426: c = SBUF0;
042D 859950    1499            mov     _c,_SBUF0
0430           1500   ;        EFM8_I2C_Nunchuck.c:427: SFRPAGE = 0x00;
0430 75A700    1501            mov     _SFRPAGE,#0x00
0433           1502   L019003?:
0433 32        1503            reti
0434           1504   ;        eliminated unneeded push/pop psw
0434           1505   ;        eliminated unneeded push/pop dpl
0434           1506   ;        eliminated unneeded push/pop dph
0434           1507   ;        eliminated unneeded push/pop b
0434           1508   ;        eliminated unneeded push/pop acc
0434           1509   ;------------------------------------------------------------
0434           1510   ;Allocation info for local variables in function 'main'
0434           1511   ;------------------------------------------------------------
0434           1512   ;x                         Allocated with name '_main_x_1_116'
0434           1513   ;f                         Allocated with name '_main_f_1_116'
0434           1514   ;i                         Allocated to registers 
0434           1515   ;rbuf                      Allocated with name '_main_rbuf_1_116'
0434           1516   ;joy_x                     Allocated with name '_main_joy_x_1_116'
0434           1517   ;joy_y                     Allocated with name '_main_joy_y_1_116'
0434           1518   ;off_x                     Allocated with name '_main_off_x_1_116'
0434           1519   ;off_y                     Allocated with name '_main_off_y_1_116'
0434           1520   ;acc_x                     Allocated with name '_main_acc_x_1_116'
0434           1521   ;acc_y                     Allocated with name '_main_acc_y_1_116'
0434           1522   ;acc_z                     Allocated with name '_main_acc_z_1_116'
0434           1523   ;angle                     Allocated to registers r2 r3 
0434           1524   ;magnitude                 Allocated with name '_main_magnitude_1_116'
0434           1525   ;konamiProg                Allocated with name '_main_konamiProg_1_116'
0434           1526   ;koldProg                  Allocated with name '_main_koldProg_1_116'
0434           1527   ;accelLoop                 Allocated with name '_main_accelLoop_1_116'
0434           1528   ;sloc4                     Allocated with name '_main_sloc4_1_0'
0434           1529   ;------------------------------------------------------------
0434           1530   ;        EFM8_I2C_Nunchuck.c:432: void main (void)
0434           1531   ;        -----------------------------------------
0434           1532   ;         function main
0434           1533   ;        -----------------------------------------
0434           1534   _main:
0434           1535   ;        EFM8_I2C_Nunchuck.c:463: int konamiProg = 0;
0434 E4        1536            clr     a
0435 F5B8      1537            mov     _main_konamiProg_1_116,a
0437 F5B9      1538            mov     (_main_konamiProg_1_116 + 1),a
0439           1539   ;        EFM8_I2C_Nunchuck.c:464: bit konamiReady = 0;
0439 C218      1540            clr     _main_konamiReady_1_116
043B           1541   ;        EFM8_I2C_Nunchuck.c:467: int koldProg = 0;
043B E4        1542            clr     a
043C F508      1543            mov     _main_koldProg_1_116,a
043E F509      1544            mov     (_main_koldProg_1_116 + 1),a
0440           1545   ;        EFM8_I2C_Nunchuck.c:468: bit koldReady = 0;
0440 C268      1546            clr     _main_koldReady_1_116
0442           1547   ;        EFM8_I2C_Nunchuck.c:470: bit shakeDir = 0;
0442 C2B8      1548            clr     _main_shakeDir_1_116
0444           1549   ;        EFM8_I2C_Nunchuck.c:474: int accelLoop = -1;
0444 7558FF    1550            mov     _main_accelLoop_1_116,#0xFF
0447 7559FF    1551            mov     (_main_accelLoop_1_116 + 1),#0xFF
044A           1552   ;        EFM8_I2C_Nunchuck.c:476: EA = 1;
044A D2AF      1553            setb    _EA
044C           1554   ;        EFM8_I2C_Nunchuck.c:477: ES0 = 1;
044C D2AC      1555            setb    _ES0
044E           1556   ;        EFM8_I2C_Nunchuck.c:478: ET2=1;
044E D2AD      1557            setb    _ET2
0450           1558   ;        EFM8_I2C_Nunchuck.c:481: TR2=0;                                         // Stop timer 2
0450 C2CA      1559            clr     _TR2
0452           1560   ;        EFM8_I2C_Nunchuck.c:482: TMR2RL=0x10000L-x;             // Change reload value for new frequency
0452 75CAFF    1561            mov     _TMR2RL,#0xFF
0455 75CBF9    1562            mov     (_TMR2RL >> 8),#0xF9
0458           1563   ;        EFM8_I2C_Nunchuck.c:483: TR2=1;                                         // Start timer 2
0458 D2CA      1564            setb    _TR2
045A           1565   ;        EFM8_I2C_Nunchuck.c:484: f=SYSCLK/(2L*(0x10000L-TMR2RL));
045A AECA      1566            mov     r6,_TMR2RL
045C AFCB      1567            mov     r7,(_TMR2RL >> 8)
045E E4        1568            clr     a
045F FC        1569            mov     r4,a
0460 FD        1570            mov     r5,a
0461 C3        1571            clr     c
0462 9E        1572            subb    a,r6
0463 FE        1573            mov     r6,a
0464 E4        1574            clr     a
0465 9F        1575            subb    a,r7
0466 FF        1576            mov     r7,a
0467 7401      1577            mov     a,#0x01
0469 9C        1578            subb    a,r4
046A FC        1579            mov     r4,a
046B E4        1580            clr     a
046C 9D        1581            subb    a,r5
046D FD        1582            mov     r5,a
046E EE        1583            mov     a,r6
046F 2E        1584            add     a,r6
0470 F500      1585            mov     __divslong_PARM_2,a
0472 EF        1586            mov     a,r7
0473 33        1587            rlc     a
0474 F501      1588            mov     (__divslong_PARM_2 + 1),a
0476 EC        1589            mov     a,r4
0477 33        1590            rlc     a
0478 F502      1591            mov     (__divslong_PARM_2 + 2),a
047A ED        1592            mov     a,r5
047B 33        1593            rlc     a
047C F503      1594            mov     (__divslong_PARM_2 + 3),a
047E 906C00    1595            mov     dptr,#0x6C00
0481 75F0DC    1596            mov     b,#0xDC
0484 7402      1597            mov     a,#0x02
0486 120100    1598            lcall   __divslong
0489 858298    1599            mov     _main_f_1_116,dpl
048C 858399    1600            mov     (_main_f_1_116 + 1),dph
048F 85F09A    1601            mov     (_main_f_1_116 + 2),b
0492 F59B      1602            mov     (_main_f_1_116 + 3),a
0494           1603   ;        EFM8_I2C_Nunchuck.c:486: Timer4ms(200);
0494 7582C8    1604            mov     dpl,#0xC8
0497 120100    1605            lcall   _Timer4ms
049A           1606   ;        EFM8_I2C_Nunchuck.c:487: nunchuck_init(1);
049A D230      1607            setb    _nunchuck_init_PARM_1
049C 120100    1608            lcall   _nunchuck_init
049F           1609   ;        EFM8_I2C_Nunchuck.c:488: Timer4ms(100);
049F 758264    1610            mov     dpl,#0x64
04A2 120100    1611            lcall   _Timer4ms
04A5           1612   ;        EFM8_I2C_Nunchuck.c:490: nunchuck_getdata(rbuf);
04A5 90B6E8    1613            mov     dptr,#_main_rbuf_1_116
04A8 75F040    1614            mov     b,#0x40
04AB 120100    1615            lcall   _nunchuck_getdata
04AE           1616   ;        EFM8_I2C_Nunchuck.c:492: off_x=(int)rbuf[0]-128;
04AE ACE8      1617            mov     r4,_main_rbuf_1_116
04B0 7D00      1618            mov     r5,#0x00
04B2 EC        1619            mov     a,r4
04B3 2480      1620            add     a,#0x80
04B5 F5D8      1621            mov     _main_off_x_1_116,a
04B7 ED        1622            mov     a,r5
04B8 34FF      1623            addc    a,#0xff
04BA F5D9      1624            mov     (_main_off_x_1_116 + 1),a
04BC           1625   ;        EFM8_I2C_Nunchuck.c:493: off_y=(int)rbuf[1]-128;
04BC AEE9      1626            mov     r6,(_main_rbuf_1_116 + 0x0001)
04BE 7F00      1627            mov     r7,#0x00
04C0 EE        1628            mov     a,r6
04C1 2480      1629            add     a,#0x80
04C3 F528      1630            mov     _main_off_y_1_116,a
04C5 EF        1631            mov     a,r7
04C6 34FF      1632            addc    a,#0xff
04C8 F529      1633            mov     (_main_off_y_1_116 + 1),a
04CA           1634   ;        EFM8_I2C_Nunchuck.c:495: while(1){
04CA           1635   L020188?:
04CA           1636   ;        EFM8_I2C_Nunchuck.c:496: nunchuck_getdata(rbuf);
04CA 90B6E8    1637            mov     dptr,#_main_rbuf_1_116
04CD 75F040    1638            mov     b,#0x40
04D0 120100    1639            lcall   _nunchuck_getdata
04D3           1640   ;        EFM8_I2C_Nunchuck.c:498: joy_x=(int)rbuf[0]-128-off_x;
04D3 AEE8      1641            mov     r6,_main_rbuf_1_116
04D5 7F00      1642            mov     r7,#0x00
04D7 EE        1643            mov     a,r6
04D8 2480      1644            add     a,#0x80
04DA FE        1645            mov     r6,a
04DB EF        1646            mov     a,r7
04DC 34FF      1647            addc    a,#0xff
04DE FF        1648            mov     r7,a
04DF EE        1649            mov     a,r6
04E0 C3        1650            clr     c
04E1 95D8      1651            subb    a,_main_off_x_1_116
04E3 F538      1652            mov     _main_joy_x_1_116,a
04E5 EF        1653            mov     a,r7
04E6 95D9      1654            subb    a,(_main_off_x_1_116 + 1)
04E8 F539      1655            mov     (_main_joy_x_1_116 + 1),a
04EA           1656   ;        EFM8_I2C_Nunchuck.c:499: joy_y=(int)rbuf[1]-128-off_y;
04EA ACE9      1657            mov     r4,(_main_rbuf_1_116 + 0x0001)
04EC 7D00      1658            mov     r5,#0x00
04EE EC        1659            mov     a,r4
04EF 2480      1660            add     a,#0x80
04F1 FC        1661            mov     r4,a
04F2 ED        1662            mov     a,r5
04F3 34FF      1663            addc    a,#0xff
04F5 FD        1664            mov     r5,a
04F6 EC        1665            mov     a,r4
04F7 C3        1666            clr     c
04F8 9528      1667            subb    a,_main_off_y_1_116
04FA F588      1668            mov     _main_joy_y_1_116,a
04FC ED        1669            mov     a,r5
04FD 9529      1670            subb    a,(_main_off_y_1_116 + 1)
04FF F589      1671            mov     (_main_joy_y_1_116 + 1),a
0501           1672   ;        EFM8_I2C_Nunchuck.c:500: acc_x=rbuf[2]*4; 
0501 E5EA      1673            mov     a,(_main_rbuf_1_116 + 0x0002)
0503 75F004    1674            mov     b,#0x04
0506 A4        1675            mul     ab
0507 F578      1676            mov     _main_acc_x_1_116,a
0509 85F079    1677            mov     (_main_acc_x_1_116 + 1),b
050C           1678   ;        EFM8_I2C_Nunchuck.c:501: acc_y=rbuf[3]*4;
050C E5EB      1679            mov     a,(_main_rbuf_1_116 + 0x0003)
050E 75F004    1680            mov     b,#0x04
0511 A4        1681            mul     ab
0512 F5C8      1682            mov     _main_acc_y_1_116,a
0514 85F0C9    1683            mov     (_main_acc_y_1_116 + 1),b
0517           1684   ;        EFM8_I2C_Nunchuck.c:502: acc_z=rbuf[4]*4;
0517 E5EC      1685            mov     a,(_main_rbuf_1_116 + 0x0004)
0519 75F004    1686            mov     b,#0x04
051C A4        1687            mul     ab
051D F518      1688            mov     _main_acc_z_1_116,a
051F 85F019    1689            mov     (_main_acc_z_1_116 + 1),b
0522           1690   ;        EFM8_I2C_Nunchuck.c:504: but1=(rbuf[5] & 0x01)?1:0;
0522 E5ED      1691            mov     a,(_main_rbuf_1_116 + 0x0005)
0524 13        1692            rrc     a
0525 92E8      1693            mov     _main_but1_1_116,c
0527           1694   ;        EFM8_I2C_Nunchuck.c:505: but2=(rbuf[5] & 0x02)?1:0;
0527 E5ED      1695            mov     a,(_main_rbuf_1_116 + 0x0005)
0529 A2E1      1696            mov     c,acc.1
052B 9238      1697            mov     _main_but2_1_116,c
052D           1698   ;        EFM8_I2C_Nunchuck.c:506: if (rbuf[5] & 0x04) acc_x+=2;
052D E5ED      1699            mov     a,(_main_rbuf_1_116 + 0x0005)
052F 30E210    1700            jnb     acc.2,L020002?
0532 7402      1701            mov     a,#0x02
0534 2578      1702            add     a,_main_acc_x_1_116
0536 F578      1703            mov     _main_acc_x_1_116,a
0538 E4        1704            clr     a
0539 3579      1705            addc    a,(_main_acc_x_1_116 + 1)
053B F579      1706            mov     (_main_acc_x_1_116 + 1),a
053D           1707   L020002?:
053D           1708   ;        EFM8_I2C_Nunchuck.c:507: if (rbuf[5] & 0x08) acc_x+=1;
053D E5ED      1709            mov     a,(_main_rbuf_1_116 + 0x0005)
053F 30E350    1710            jnb     acc.3,L020004?
0542 0578      1711            inc     _main_acc_x_1_116
0544 E4        1712            clr     a
0545 B57890    1713            cjne    a,_main_acc_x_1_116,L020263?
0548 0579      1714            inc     (_main_acc_x_1_116 + 1)
054A           1715   L020263?:
054A           1716   L020004?:
054A           1717   ;        EFM8_I2C_Nunchuck.c:508: if (rbuf[5] & 0x10) acc_y+=2;
054A E5ED      1718            mov     a,(_main_rbuf_1_116 + 0x0005)
054C 30E4D0    1719            jnb     acc.4,L020006?
054F 7402      1720            mov     a,#0x02
0551 25C8      1721            add     a,_main_acc_y_1_116
0553 F5C8      1722            mov     _main_acc_y_1_116,a
0555 E4        1723            clr     a
0556 35C9      1724            addc    a,(_main_acc_y_1_116 + 1)
0558 F5C9      1725            mov     (_main_acc_y_1_116 + 1),a
055A           1726   L020006?:
055A           1727   ;        EFM8_I2C_Nunchuck.c:509: if (rbuf[5] & 0x20) acc_y+=1;
055A E5ED      1728            mov     a,(_main_rbuf_1_116 + 0x0005)
055C 30E510    1729            jnb     acc.5,L020008?
055F 05C8      1730            inc     _main_acc_y_1_116
0561 E4        1731            clr     a
0562 B5C850    1732            cjne    a,_main_acc_y_1_116,L020266?
0565 05C9      1733            inc     (_main_acc_y_1_116 + 1)
0567           1734   L020266?:
0567           1735   L020008?:
0567           1736   ;        EFM8_I2C_Nunchuck.c:510: if (rbuf[5] & 0x40) acc_z+=2;
0567 E5ED      1737            mov     a,(_main_rbuf_1_116 + 0x0005)
0569 30E690    1738            jnb     acc.6,L020010?
056C 7402      1739            mov     a,#0x02
056E 2518      1740            add     a,_main_acc_z_1_116
0570 F518      1741            mov     _main_acc_z_1_116,a
0572 E4        1742            clr     a
0573 3519      1743            addc    a,(_main_acc_z_1_116 + 1)
0575 F519      1744            mov     (_main_acc_z_1_116 + 1),a
0577           1745   L020010?:
0577           1746   ;        EFM8_I2C_Nunchuck.c:511: if (rbuf[5] & 0x80) acc_z+=1;
0577 E5ED      1747            mov     a,(_main_rbuf_1_116 + 0x0005)
0579 30E7D0    1748            jnb     acc.7,L020012?
057C 0518      1749            inc     _main_acc_z_1_116
057E E4        1750            clr     a
057F B51810    1751            cjne    a,_main_acc_z_1_116,L020269?
0582 0519      1752            inc     (_main_acc_z_1_116 + 1)
0584           1753   L020269?:
0584           1754   L020012?:
0584           1755   ;        EFM8_I2C_Nunchuck.c:515: signal_stream0 = 1;
0584 D288      1756            setb    _main_signal_stream0_1_116
0586           1757   ;        EFM8_I2C_Nunchuck.c:516: signal_stream1 = 0;
0586 C2F8      1758            clr     _main_sloc0_1_0
0588           1759   ;        EFM8_I2C_Nunchuck.c:517: signal_stream2 = 0;
0588 C238      1760            clr     _main_sloc1_1_0
058A           1761   ;        EFM8_I2C_Nunchuck.c:518: signal_stream3 = 0;
058A C278      1762            clr     _main_sloc2_1_0
058C           1763   ;        EFM8_I2C_Nunchuck.c:519: signal_stream4 = 0;
058C C2B8      1764            clr     _main_sloc3_1_0
058E           1765   ;        EFM8_I2C_Nunchuck.c:520: signal_stream5 = 0;
058E C2D8      1766            clr     _main_signal_stream5_1_116
0590           1767   ;        EFM8_I2C_Nunchuck.c:521: signal_stream6 = 0;
0590 C228      1768            clr     _main_signal_stream6_1_116
0592           1769   ;        EFM8_I2C_Nunchuck.c:522: signal_stream7 = 0;
0592 C278      1770            clr     _main_signal_stream7_1_116
0594           1771   ;        EFM8_I2C_Nunchuck.c:523: signal_stream8 = 0;
0594 C2C8      1772            clr     _main_signal_stream8_1_116
0596           1773   ;        EFM8_I2C_Nunchuck.c:525: magnitude = sqrtf(joy_x*joy_x + joy_y*joy_y) * (15.0/100);
0596 853800    1774            mov     __mulint_PARM_2,_main_joy_x_1_116
0599 853901    1775            mov     (__mulint_PARM_2 + 1),(_main_joy_x_1_116 + 1)
059C 853882    1776            mov     dpl,_main_joy_x_1_116
059F 853983    1777            mov     dph,(_main_joy_x_1_116 + 1)
05A2 120100    1778            lcall   __mulint
05A5 AC82      1779            mov     r4,dpl
05A7 AD83      1780            mov     r5,dph
05A9 858800    1781            mov     __mulint_PARM_2,_main_joy_y_1_116
05AC 858901    1782            mov     (__mulint_PARM_2 + 1),(_main_joy_y_1_116 + 1)
05AF 858882    1783            mov     dpl,_main_joy_y_1_116
05B2 858983    1784            mov     dph,(_main_joy_y_1_116 + 1)
05B5 C004      1785            push    ar4
05B7 C005      1786            push    ar5
05B9 120100    1787            lcall   __mulint
05BC AE82      1788            mov     r6,dpl
05BE AF83      1789            mov     r7,dph
05C0 D005      1790            pop     ar5
05C2 D004      1791            pop     ar4
05C4 EE        1792            mov     a,r6
05C5 2C        1793            add     a,r4
05C6 F582      1794            mov     dpl,a
05C8 EF        1795            mov     a,r7
05C9 3D        1796            addc    a,r5
05CA F583      1797            mov     dph,a
05CC 120100    1798            lcall   ___sint2fs
05CF 120100    1799            lcall   _sqrtf
05D2 AC82      1800            mov     r4,dpl
05D4 AD83      1801            mov     r5,dph
05D6 AEF0      1802            mov     r6,b
05D8 FF        1803            mov     r7,a
05D9 C004      1804            push    ar4
05DB C005      1805            push    ar5
05DD C006      1806            push    ar6
05DF C007      1807            push    ar7
05E1 90999A    1808            mov     dptr,#0x999A
05E4 75F019    1809            mov     b,#0x19
05E7 743E      1810            mov     a,#0x3E
05E9 120100    1811            lcall   ___fsmul
05EC AC82      1812            mov     r4,dpl
05EE AD83      1813            mov     r5,dph
05F0 AEF0      1814            mov     r6,b
05F2 FF        1815            mov     r7,a
05F3 E581      1816            mov     a,sp
05F5 24FC      1817            add     a,#0xfc
05F7 F581      1818            mov     sp,a
05F9 8C82      1819            mov     dpl,r4
05FB 8D83      1820            mov     dph,r5
05FD 8EF0      1821            mov     b,r6
05FF EF        1822            mov     a,r7
0600 120100    1823            lcall   ___fs2sint
0603 858268    1824            mov     _main_magnitude_1_116,dpl
0606 858369    1825            mov     (_main_magnitude_1_116 + 1),dph
0609           1826   ;        EFM8_I2C_Nunchuck.c:529: if(c == 'U'){
0609 7455      1827            mov     a,#0x55
060B B55010    1828            cjne    a,_c,L020022?
060E           1829   ;        EFM8_I2C_Nunchuck.c:530: signal_stream1 = 0;
060E C2F8      1830            clr     _main_sloc0_1_0
0610           1831   ;        EFM8_I2C_Nunchuck.c:531: signal_stream2 = 1;
0610 D238      1832            setb    _main_sloc1_1_0
0612           1833   ;        EFM8_I2C_Nunchuck.c:532: signal_stream3 = 1;
0612 D278      1834            setb    _main_sloc2_1_0
0614           1835   ;        EFM8_I2C_Nunchuck.c:533: signal_stream4 = 1;
0614 D2B8      1836            setb    _main_sloc3_1_0
0616           1837   ;        EFM8_I2C_Nunchuck.c:534: signal_stream8 = 1;
0616 D2C8      1838            setb    _main_signal_stream8_1_116
0618           1839   ;        EFM8_I2C_Nunchuck.c:535: c = 'Z';
0618 75505A    1840            mov     _c,#0x5A
061B           1841   ;        EFM8_I2C_Nunchuck.c:536: goto send;
061B 020100    1842            ljmp    L020180?
061E           1843   L020022?:
061E           1844   ;        EFM8_I2C_Nunchuck.c:538: else if(c == 'L'){
061E 744C      1845            mov     a,#0x4C
0620 B55090    1846            cjne    a,_c,L020019?
0623           1847   ;        EFM8_I2C_Nunchuck.c:539: signal_stream1 = 1;
0623 D2F8      1848            setb    _main_sloc0_1_0
0625           1849   ;        EFM8_I2C_Nunchuck.c:540: signal_stream2 = 1;
0625 D238      1850            setb    _main_sloc1_1_0
0627           1851   ;        EFM8_I2C_Nunchuck.c:541: signal_stream3 = 1;
0627 D278      1852            setb    _main_sloc2_1_0
0629           1853   ;        EFM8_I2C_Nunchuck.c:542: signal_stream4 = 1;
0629 D2B8      1854            setb    _main_sloc3_1_0
062B           1855   ;        EFM8_I2C_Nunchuck.c:543: signal_stream7 = 1;
062B D278      1856            setb    _main_signal_stream7_1_116
062D           1857   ;        EFM8_I2C_Nunchuck.c:544: signal_stream8 = 1;
062D D2C8      1858            setb    _main_signal_stream8_1_116
062F           1859   ;        EFM8_I2C_Nunchuck.c:545: c = 'Z';
062F 75505A    1860            mov     _c,#0x5A
0632           1861   ;        EFM8_I2C_Nunchuck.c:546: goto send;
0632 020100    1862            ljmp    L020180?
0635           1863   L020019?:
0635           1864   ;        EFM8_I2C_Nunchuck.c:547: }else if(c == 'D'){
0635 7444      1865            mov     a,#0x44
0637 B550D0    1866            cjne    a,_c,L020016?
063A           1867   ;        EFM8_I2C_Nunchuck.c:548: signal_stream1 = 0;
063A C2F8      1868            clr     _main_sloc0_1_0
063C           1869   ;        EFM8_I2C_Nunchuck.c:549: signal_stream2 = 1;
063C D238      1870            setb    _main_sloc1_1_0
063E           1871   ;        EFM8_I2C_Nunchuck.c:550: signal_stream3 = 1;
063E D278      1872            setb    _main_sloc2_1_0
0640           1873   ;        EFM8_I2C_Nunchuck.c:551: signal_stream4 = 1;
0640 D2B8      1874            setb    _main_sloc3_1_0
0642           1875   ;        EFM8_I2C_Nunchuck.c:552: signal_stream6 = 1;
0642 D228      1876            setb    _main_signal_stream6_1_116
0644           1877   ;        EFM8_I2C_Nunchuck.c:553: c = 'Z';
0644 75505A    1878            mov     _c,#0x5A
0647           1879   ;        EFM8_I2C_Nunchuck.c:554: goto send;
0647 020100    1880            ljmp    L020180?
064A           1881   L020016?:
064A           1882   ;        EFM8_I2C_Nunchuck.c:556: else if(c == 'R'){
064A 7452      1883            mov     a,#0x52
064C B55010    1884            cjne    a,_c,L020020?
064F           1885   ;        EFM8_I2C_Nunchuck.c:557: signal_stream1 = 0;
064F C2F8      1886            clr     _main_sloc0_1_0
0651           1887   ;        EFM8_I2C_Nunchuck.c:558: signal_stream2 = 1;
0651 D238      1888            setb    _main_sloc1_1_0
0653           1889   ;        EFM8_I2C_Nunchuck.c:559: signal_stream3 = 1;
0653 D278      1890            setb    _main_sloc2_1_0
0655           1891   ;        EFM8_I2C_Nunchuck.c:560: signal_stream4 = 1;
0655 D2B8      1892            setb    _main_sloc3_1_0
0657           1893   ;        EFM8_I2C_Nunchuck.c:561: signal_stream7 = 1;
0657 D278      1894            setb    _main_signal_stream7_1_116
0659           1895   ;        EFM8_I2C_Nunchuck.c:562: signal_stream8 = 1;
0659 D2C8      1896            setb    _main_signal_stream8_1_116
065B           1897   ;        EFM8_I2C_Nunchuck.c:563: c = 'Z';
065B 75505A    1898            mov     _c,#0x5A
065E           1899   ;        EFM8_I2C_Nunchuck.c:564: goto send;
065E 020100    1900            ljmp    L020180?
0661           1901   L020020?:
0661           1902   ;        EFM8_I2C_Nunchuck.c:569: if(magnitude <= 0){
0661 C3        1903            clr     c
0662 E4        1904            clr     a
0663 9568      1905            subb    a,_main_magnitude_1_116
0665 E4        1906            clr     a
0666 6480      1907            xrl     a,#0x80
0668 8569F0    1908            mov     b,(_main_magnitude_1_116 + 1)
066B 63F080    1909            xrl     b,#0x80
066E 95F0      1910            subb    a,b
0670 5001      1911            jnc     L020278?
0672 020100    1912            ljmp    L020127?
0675           1913   L020278?:
0675           1914   ;        EFM8_I2C_Nunchuck.c:570: if(!but1){
0675 20E8D0    1915            jb      _main_but1_1_116,L020044?
0678           1916   ;        EFM8_I2C_Nunchuck.c:572: signal_stream1 = 1;
0678 D2F8      1917            setb    _main_sloc0_1_0
067A           1918   ;        EFM8_I2C_Nunchuck.c:573: signal_stream2 = 1;
067A D238      1919            setb    _main_sloc1_1_0
067C           1920   ;        EFM8_I2C_Nunchuck.c:574: signal_stream3 = 1;
067C D278      1921            setb    _main_sloc2_1_0
067E           1922   ;        EFM8_I2C_Nunchuck.c:575: signal_stream4 = 1;
067E D2B8      1923            setb    _main_sloc3_1_0
0680           1924   ;        EFM8_I2C_Nunchuck.c:577: signal_stream5 = 1;
0680 D2D8      1925            setb    _main_signal_stream5_1_116
0682           1926   ;        EFM8_I2C_Nunchuck.c:578: signal_stream6 = 1;
0682 D228      1927            setb    _main_signal_stream6_1_116
0684           1928   ;        EFM8_I2C_Nunchuck.c:579: signal_stream7 = 1;
0684 D278      1929            setb    _main_signal_stream7_1_116
0686           1930   ;        EFM8_I2C_Nunchuck.c:580: signal_stream8 = 1;
0686 D2C8      1931            setb    _main_signal_stream8_1_116
0688           1932   ;        EFM8_I2C_Nunchuck.c:582: printf("ACCEL ");
0688 7410      1933            mov     a,#__str_0
068A C0E0      1934            push    acc
068C 74D0      1935            mov     a,#(__str_0 >> 8)
068E C0E0      1936            push    acc
0690 7480      1937            mov     a,#0x80
0692 C0E0      1938            push    acc
0694 120100    1939            lcall   _printf
0697 1581      1940            dec     sp
0699 1581      1941            dec     sp
069B 1581      1942            dec     sp
069D           1943   ;        EFM8_I2C_Nunchuck.c:584: if(konamiReady){
069D 301890    1944            jnb     _main_konamiReady_1_116,L020028?
06A0           1945   ;        EFM8_I2C_Nunchuck.c:585: if(konamiProg == 8){
06A0 7408      1946            mov     a,#0x08
06A2 B5B8D0    1947            cjne    a,_main_konamiProg_1_116,L020281?
06A5 E4        1948            clr     a
06A6 B5B9D0    1949            cjne    a,(_main_konamiProg_1_116 + 1),L020281?
06A9 8001      1950            sjmp    L020282?
06AB           1951   L020281?:
06AB 8001      1952            sjmp    L020025?
06AD           1953   L020282?:
06AD           1954   ;        EFM8_I2C_Nunchuck.c:586: konamiProg++;
06AD 05B8      1955            inc     _main_konamiProg_1_116
06AF E4        1956            clr     a
06B0 B5B890    1957            cjne    a,_main_konamiProg_1_116,L020028?
06B3 05B9      1958            inc     (_main_konamiProg_1_116 + 1)
06B5 8001      1959            sjmp    L020028?
06B7           1960   L020025?:
06B7           1961   ;        EFM8_I2C_Nunchuck.c:588: konamiProg = 0;
06B7 E4        1962            clr     a
06B8 F5B8      1963            mov     _main_konamiProg_1_116,a
06BA F5B9      1964            mov     (_main_konamiProg_1_116 + 1),a
06BC           1965   L020028?:
06BC           1966   ;        EFM8_I2C_Nunchuck.c:591: konamiReady = 0;
06BC C218      1967            clr     _main_konamiReady_1_116
06BE 020100    1968            ljmp    L020128?
06C1           1969   L020044?:
06C1           1970   ;        EFM8_I2C_Nunchuck.c:592: }else if(!but2 || c == 'S'){
06C1 3038D0    1971            jnb     _main_but2_1_116,L020039?
06C4 7453      1972            mov     a,#0x53
06C6 B55010    1973            cjne    a,_c,L020040?
06C9           1974   L020039?:
06C9           1975   ;        EFM8_I2C_Nunchuck.c:594: printf("STOP ");
06C9 7450      1976            mov     a,#__str_1
06CB C0E0      1977            push    acc
06CD 74D2      1978            mov     a,#(__str_1 >> 8)
06CF C0E0      1979            push    acc
06D1 7480      1980            mov     a,#0x80
06D3 C0E0      1981            push    acc
06D5 120100    1982            lcall   _printf
06D8 1581      1983            dec     sp
06DA 1581      1984            dec     sp
06DC 1581      1985            dec     sp
06DE           1986   ;        EFM8_I2C_Nunchuck.c:596: if(konamiReady){
06DE 301890    1987            jnb     _main_konamiReady_1_116,L020033?
06E1           1988   ;        EFM8_I2C_Nunchuck.c:597: if(konamiProg == 9){
06E1 7409      1989            mov     a,#0x09
06E3 B5B8D0    1990            cjne    a,_main_konamiProg_1_116,L020288?
06E6 E4        1991            clr     a
06E7 B5B9D0    1992            cjne    a,(_main_konamiProg_1_116 + 1),L020288?
06EA 8001      1993            sjmp    L020289?
06EC           1994   L020288?:
06EC 8001      1995            sjmp    L020030?
06EE           1996   L020289?:
06EE           1997   ;        EFM8_I2C_Nunchuck.c:598: konamiProg++;
06EE 05B8      1998            inc     _main_konamiProg_1_116
06F0 E4        1999            clr     a
06F1 B5B890    2000            cjne    a,_main_konamiProg_1_116,L020033?
06F4 05B9      2001            inc     (_main_konamiProg_1_116 + 1)
06F6 8001      2002            sjmp    L020033?
06F8           2003   L020030?:
06F8           2004   ;        EFM8_I2C_Nunchuck.c:600: konamiProg = 0;
06F8 E4        2005            clr     a
06F9 F5B8      2006            mov     _main_konamiProg_1_116,a
06FB F5B9      2007            mov     (_main_konamiProg_1_116 + 1),a
06FD           2008   L020033?:
06FD           2009   ;        EFM8_I2C_Nunchuck.c:603: konamiReady = 0;
06FD C218      2010            clr     _main_konamiReady_1_116
06FF           2011   ;        EFM8_I2C_Nunchuck.c:605: if(koldReady){
06FF 306890    2012            jnb     _main_koldReady_1_116,L020038?
0702           2013   ;        EFM8_I2C_Nunchuck.c:606: if(koldProg == 4){
0702 7404      2014            mov     a,#0x04
0704 B508D0    2015            cjne    a,_main_koldProg_1_116,L020292?
0707 E4        2016            clr     a
0708 B509D0    2017            cjne    a,(_main_koldProg_1_116 + 1),L020292?
070B 8001      2018            sjmp    L020293?
070D           2019   L020292?:
070D 8001      2020            sjmp    L020035?
070F           2021   L020293?:
070F           2022   ;        EFM8_I2C_Nunchuck.c:607: koldProg++;
070F 0508      2023            inc     _main_koldProg_1_116
0711 E4        2024            clr     a
0712 B50890    2025            cjne    a,_main_koldProg_1_116,L020038?
0715 0509      2026            inc     (_main_koldProg_1_116 + 1)
0717 8001      2027            sjmp    L020038?
0719           2028   L020035?:
0719           2029   ;        EFM8_I2C_Nunchuck.c:609: koldProg = 0;
0719 E4        2030            clr     a
071A F508      2031            mov     _main_koldProg_1_116,a
071C F509      2032            mov     (_main_koldProg_1_116 + 1),a
071E           2033   L020038?:
071E           2034   ;        EFM8_I2C_Nunchuck.c:612: koldReady = 0;
071E C268      2035            clr     _main_koldReady_1_116
0720           2036   ;        EFM8_I2C_Nunchuck.c:613: accelLoop = -1;
0720 7558FF    2037            mov     _main_accelLoop_1_116,#0xFF
0723 7559FF    2038            mov     (_main_accelLoop_1_116 + 1),#0xFF
0726 020100    2039            ljmp    L020128?
0729           2040   L020040?:
0729           2041   ;        EFM8_I2C_Nunchuck.c:616: printf("IDLE ");
0729 7490      2042            mov     a,#__str_2
072B C0E0      2043            push    acc
072D 74D4      2044            mov     a,#(__str_2 >> 8)
072F C0E0      2045            push    acc
0731 7480      2046            mov     a,#0x80
0733 C0E0      2047            push    acc
0735 120100    2048            lcall   _printf
0738 1581      2049            dec     sp
073A 1581      2050            dec     sp
073C 1581      2051            dec     sp
073E           2052   ;        EFM8_I2C_Nunchuck.c:617: konamiReady = 1;
073E D218      2053            setb    _main_konamiReady_1_116
0740           2054   ;        EFM8_I2C_Nunchuck.c:618: koldReady = 1;
0740 D268      2055            setb    _main_koldReady_1_116
0742 020100    2056            ljmp    L020128?
0745           2057   L020127?:
0745           2058   ;        EFM8_I2C_Nunchuck.c:621: signal_stream0 = 1;
0745 D288      2059            setb    _main_signal_stream0_1_116
0747           2060   ;        EFM8_I2C_Nunchuck.c:622: angle = abs(atanf((float) joy_y / (float) joy_x) * 180/PI);    // Range: 0 to pi/2 -> 0 to 90
0747 858882    2061            mov     dpl,_main_joy_y_1_116
074A 858983    2062            mov     dph,(_main_joy_y_1_116 + 1)
074D 120100    2063            lcall   ___sint2fs
0750 858298    2064            mov     _main_sloc4_1_0,dpl
0753 858399    2065            mov     (_main_sloc4_1_0 + 1),dph
0756 85F09A    2066            mov     (_main_sloc4_1_0 + 2),b
0759 F59B      2067            mov     (_main_sloc4_1_0 + 3),a
075B 853882    2068            mov     dpl,_main_joy_x_1_116
075E 853983    2069            mov     dph,(_main_joy_x_1_116 + 1)
0761 120100    2070            lcall   ___sint2fs
0764 AA82      2071            mov     r2,dpl
0766 AB83      2072            mov     r3,dph
0768 ACF0      2073            mov     r4,b
076A FD        2074            mov     r5,a
076B C002      2075            push    ar2
076D C003      2076            push    ar3
076F C004      2077            push    ar4
0771 C005      2078            push    ar5
0773 859882    2079            mov     dpl,_main_sloc4_1_0
0776 859983    2080            mov     dph,(_main_sloc4_1_0 + 1)
0779 859AF0    2081            mov     b,(_main_sloc4_1_0 + 2)
077C E59B      2082            mov     a,(_main_sloc4_1_0 + 3)
077E 120100    2083            lcall   ___fsdiv
0781 AA82      2084            mov     r2,dpl
0783 AB83      2085            mov     r3,dph
0785 ACF0      2086            mov     r4,b
0787 FD        2087            mov     r5,a
0788 E581      2088            mov     a,sp
078A 24FC      2089            add     a,#0xfc
078C F581      2090            mov     sp,a
078E 8A82      2091            mov     dpl,r2
0790 8B83      2092            mov     dph,r3
0792 8CF0      2093            mov     b,r4
0794 ED        2094            mov     a,r5
0795 120100    2095            lcall   _atanf
0798 AA82      2096            mov     r2,dpl
079A AB83      2097            mov     r3,dph
079C ACF0      2098            mov     r4,b
079E FD        2099            mov     r5,a
079F C002      2100            push    ar2
07A1 C003      2101            push    ar3
07A3 C004      2102            push    ar4
07A5 C005      2103            push    ar5
07A7 900000    2104            mov     dptr,#0x0000
07AA 75F034    2105            mov     b,#0x34
07AD 7443      2106            mov     a,#0x43
07AF 120100    2107            lcall   ___fsmul
07B2 AA82      2108            mov     r2,dpl
07B4 AB83      2109            mov     r3,dph
07B6 ACF0      2110            mov     r4,b
07B8 FD        2111            mov     r5,a
07B9 E581      2112            mov     a,sp
07BB 24FC      2113            add     a,#0xfc
07BD F581      2114            mov     sp,a
07BF 74DB      2115            mov     a,#0xDB
07C1 C0E0      2116            push    acc
07C3 740F      2117            mov     a,#0x0F
07C5 C0E0      2118            push    acc
07C7 7449      2119            mov     a,#0x49
07C9 C0E0      2120            push    acc
07CB 7440      2121            mov     a,#0x40
07CD C0E0      2122            push    acc
07CF 8A82      2123            mov     dpl,r2
07D1 8B83      2124            mov     dph,r3
07D3 8CF0      2125            mov     b,r4
07D5 ED        2126            mov     a,r5
07D6 120100    2127            lcall   ___fsdiv
07D9 AA82      2128            mov     r2,dpl
07DB AB83      2129            mov     r3,dph
07DD ACF0      2130            mov     r4,b
07DF FD        2131            mov     r5,a
07E0 E581      2132            mov     a,sp
07E2 24FC      2133            add     a,#0xfc
07E4 F581      2134            mov     sp,a
07E6 8A82      2135            mov     dpl,r2
07E8 8B83      2136            mov     dph,r3
07EA 8CF0      2137            mov     b,r4
07EC ED        2138            mov     a,r5
07ED 120100    2139            lcall   ___fs2sint
07F0 120100    2140            lcall   _abs
07F3 AA82      2141            mov     r2,dpl
07F5 AB83      2142            mov     r3,dph
07F7           2143   ;        EFM8_I2C_Nunchuck.c:625: signal_stream1 = magnitude % 2;                                                // speed[0]
07F7 750002    2144            mov     __modsint_PARM_2,#0x02
07FA E4        2145            clr     a
07FB F501      2146            mov     (__modsint_PARM_2 + 1),a
07FD 856882    2147            mov     dpl,_main_magnitude_1_116
0800 856983    2148            mov     dph,(_main_magnitude_1_116 + 1)
0803 C002      2149            push    ar2
0805 C003      2150            push    ar3
0807 120100    2151            lcall   __modsint
080A AC82      2152            mov     r4,dpl
080C AD83      2153            mov     r5,dph
080E EC        2154            mov     a,r4
080F 4D        2155            orl     a,r5
0810 24FF      2156            add     a,#0xff
0812 92F8      2157            mov     _main_sloc0_1_0,c
0814           2158   ;        EFM8_I2C_Nunchuck.c:626: signal_stream2 = (magnitude / 2) % 2;                          // speed[1]
0814 750002    2159            mov     __divsint_PARM_2,#0x02
0817 E4        2160            clr     a
0818 F501      2161            mov     (__divsint_PARM_2 + 1),a
081A 856882    2162            mov     dpl,_main_magnitude_1_116
081D 856983    2163            mov     dph,(_main_magnitude_1_116 + 1)
0820 120100    2164            lcall   __divsint
0823 AC82      2165            mov     r4,dpl
0825 AD83      2166            mov     r5,dph
0827 750002    2167            mov     __modsint_PARM_2,#0x02
082A E4        2168            clr     a
082B F501      2169            mov     (__modsint_PARM_2 + 1),a
082D 8C82      2170            mov     dpl,r4
082F 8D83      2171            mov     dph,r5
0831 C004      2172            push    ar4
0833 C005      2173            push    ar5
0835 120100    2174            lcall   __modsint
0838 AE82      2175            mov     r6,dpl
083A AF83      2176            mov     r7,dph
083C D005      2177            pop     ar5
083E D004      2178            pop     ar4
0840 EE        2179            mov     a,r6
0841 4F        2180            orl     a,r7
0842 24FF      2181            add     a,#0xff
0844 9238      2182            mov     _main_sloc1_1_0,c
0846           2183   ;        EFM8_I2C_Nunchuck.c:627: signal_stream3 = ((magnitude / 2) / 2) % 2;                    // speed[2]
0846 750002    2184            mov     __divsint_PARM_2,#0x02
0849 E4        2185            clr     a
084A F501      2186            mov     (__divsint_PARM_2 + 1),a
084C 8C82      2187            mov     dpl,r4
084E 8D83      2188            mov     dph,r5
0850 120100    2189            lcall   __divsint
0853 AC82      2190            mov     r4,dpl
0855 AD83      2191            mov     r5,dph
0857 750002    2192            mov     __modsint_PARM_2,#0x02
085A E4        2193            clr     a
085B F501      2194            mov     (__modsint_PARM_2 + 1),a
085D 8C82      2195            mov     dpl,r4
085F 8D83      2196            mov     dph,r5
0861 C004      2197            push    ar4
0863 C005      2198            push    ar5
0865 120100    2199            lcall   __modsint
0868 AE82      2200            mov     r6,dpl
086A AF83      2201            mov     r7,dph
086C D005      2202            pop     ar5
086E D004      2203            pop     ar4
0870 EE        2204            mov     a,r6
0871 4F        2205            orl     a,r7
0872 24FF      2206            add     a,#0xff
0874 9278      2207            mov     _main_sloc2_1_0,c
0876           2208   ;        EFM8_I2C_Nunchuck.c:628: signal_stream4 = (((magnitude / 2) / 2) / 2) % 2;      // speed[3]
0876 750002    2209            mov     __divsint_PARM_2,#0x02
0879 E4        2210            clr     a
087A F501      2211            mov     (__divsint_PARM_2 + 1),a
087C 8C82      2212            mov     dpl,r4
087E 8D83      2213            mov     dph,r5
0880 120100    2214            lcall   __divsint
0883 AC82      2215            mov     r4,dpl
0885 AD83      2216            mov     r5,dph
0887 750002    2217            mov     __modsint_PARM_2,#0x02
088A E4        2218            clr     a
088B F501      2219            mov     (__modsint_PARM_2 + 1),a
088D 8C82      2220            mov     dpl,r4
088F 8D83      2221            mov     dph,r5
0891 120100    2222            lcall   __modsint
0894 AC82      2223            mov     r4,dpl
0896 AD83      2224            mov     r5,dph
0898 D003      2225            pop     ar3
089A D002      2226            pop     ar2
089C EC        2227            mov     a,r4
089D 4D        2228            orl     a,r5
089E 24FF      2229            add     a,#0xff
08A0 92B8      2230            mov     _main_sloc3_1_0,c
08A2           2231   ;        EFM8_I2C_Nunchuck.c:630: if(joy_y > JOYMARGIN){                                 // Forward
08A2 C3        2232            clr     c
08A3 740A      2233            mov     a,#0x0A
08A5 9588      2234            subb    a,_main_joy_y_1_116
08A7 E4        2235            clr     a
08A8 6480      2236            xrl     a,#0x80
08AA 8589F0    2237            mov     b,(_main_joy_y_1_116 + 1)
08AD 63F080    2238            xrl     b,#0x80
08B0 95F0      2239            subb    a,b
08B2 4001      2240            jc      L020295?
08B4 020100    2241            ljmp    L020124?
08B7           2242   L020295?:
08B7           2243   ;        EFM8_I2C_Nunchuck.c:631: if(joy_x < -JOYMARGIN && (angle > ANGLEMARGIN && angle < (90 - ANGLEMARGIN))){
08B7 C3        2244            clr     c
08B8 E538      2245            mov     a,_main_joy_x_1_116
08BA 94F6      2246            subb    a,#0xF6
08BC E539      2247            mov     a,(_main_joy_x_1_116 + 1)
08BE 6480      2248            xrl     a,#0x80
08C0 947F      2249            subb    a,#0x7f
08C2 5001      2250            jnc     L020061?
08C4 C3        2251            clr     c
08C5 7414      2252            mov     a,#0x14
08C7 9A        2253            subb    a,r2
08C8 E4        2254            clr     a
08C9 6480      2255            xrl     a,#0x80
08CB 8BF0      2256            mov     b,r3
08CD 63F080    2257            xrl     b,#0x80
08D0 95F0      2258            subb    a,b
08D2 5001      2259            jnc     L020061?
08D4 C3        2260            clr     c
08D5 EA        2261            mov     a,r2
08D6 9446      2262            subb    a,#0x46
08D8 EB        2263            mov     a,r3
08D9 6480      2264            xrl     a,#0x80
08DB 9480      2265            subb    a,#0x80
08DD 5001      2266            jnc     L020061?
08DF           2267   ;        EFM8_I2C_Nunchuck.c:633: signal_stream6 = 1;
08DF D228      2268            setb    _main_signal_stream6_1_116
08E1           2269   ;        EFM8_I2C_Nunchuck.c:634: signal_stream8 = 1;
08E1 D2C8      2270            setb    _main_signal_stream8_1_116
08E3           2271   ;        EFM8_I2C_Nunchuck.c:635: printf("LTURN ");
08E3 7470      2272            mov     a,#__str_3
08E5 C0E0      2273            push    acc
08E7 74D7      2274            mov     a,#(__str_3 >> 8)
08E9 C0E0      2275            push    acc
08EB 7480      2276            mov     a,#0x80
08ED C0E0      2277            push    acc
08EF 120100    2278            lcall   _printf
08F2 1581      2279            dec     sp
08F4 1581      2280            dec     sp
08F6 1581      2281            dec     sp
08F8 020100    2282            ljmp    L020128?
08FB           2283   L020061?:
08FB           2284   ;        EFM8_I2C_Nunchuck.c:636: }else if(joy_x > JOYMARGIN && (angle > ANGLEMARGIN && angle < (90 - ANGLEMARGIN))){
08FB C3        2285            clr     c
08FC 740A      2286            mov     a,#0x0A
08FE 9538      2287            subb    a,_main_joy_x_1_116
0900 E4        2288            clr     a
0901 6480      2289            xrl     a,#0x80
0903 8539F0    2290            mov     b,(_main_joy_x_1_116 + 1)
0906 63F080    2291            xrl     b,#0x80
0909 95F0      2292            subb    a,b
090B 5001      2293            jnc     L020056?
090D C3        2294            clr     c
090E 7414      2295            mov     a,#0x14
0910 9A        2296            subb    a,r2
0911 E4        2297            clr     a
0912 6480      2298            xrl     a,#0x80
0914 8BF0      2299            mov     b,r3
0916 63F080    2300            xrl     b,#0x80
0919 95F0      2301            subb    a,b
091B 5001      2302            jnc     L020056?
091D C3        2303            clr     c
091E EA        2304            mov     a,r2
091F 9446      2305            subb    a,#0x46
0921 EB        2306            mov     a,r3
0922 6480      2307            xrl     a,#0x80
0924 9480      2308            subb    a,#0x80
0926 5001      2309            jnc     L020056?
0928           2310   ;        EFM8_I2C_Nunchuck.c:638: signal_stream6 = 1;
0928 D228      2311            setb    _main_signal_stream6_1_116
092A           2312   ;        EFM8_I2C_Nunchuck.c:639: signal_stream7 = 1;
092A D278      2313            setb    _main_signal_stream7_1_116
092C           2314   ;        EFM8_I2C_Nunchuck.c:640: printf("RTURN ");
092C 74F0      2315            mov     a,#__str_4
092E C0E0      2316            push    acc
0930 74D7      2317            mov     a,#(__str_4 >> 8)
0932 C0E0      2318            push    acc
0934 7480      2319            mov     a,#0x80
0936 C0E0      2320            push    acc
0938 120100    2321            lcall   _printf
093B 1581      2322            dec     sp
093D 1581      2323            dec     sp
093F 1581      2324            dec     sp
0941 020100    2325            ljmp    L020128?
0944           2326   L020056?:
0944           2327   ;        EFM8_I2C_Nunchuck.c:641: }else if(angle >= (90 - ANGLEMARGIN)){
0944 C3        2328            clr     c
0945 EA        2329            mov     a,r2
0946 9446      2330            subb    a,#0x46
0948 EB        2331            mov     a,r3
0949 6480      2332            xrl     a,#0x80
094B 9480      2333            subb    a,#0x80
094D 4001      2334            jc      L020053?
094F           2335   ;        EFM8_I2C_Nunchuck.c:644: signal_stream5 = 1;
094F D2D8      2336            setb    _main_signal_stream5_1_116
0951           2337   ;        EFM8_I2C_Nunchuck.c:645: signal_stream6 = 1;
0951 D228      2338            setb    _main_signal_stream6_1_116
0953           2339   ;        EFM8_I2C_Nunchuck.c:646: signal_stream7 = 1;
0953 D278      2340            setb    _main_signal_stream7_1_116
0955           2341   ;        EFM8_I2C_Nunchuck.c:647: signal_stream8 = 1;
0955 D2C8      2342            setb    _main_signal_stream8_1_116
0957           2343   ;        EFM8_I2C_Nunchuck.c:649: printf("GO ");
0957 7470      2344            mov     a,#__str_5
0959 C0E0      2345            push    acc
095B 74D8      2346            mov     a,#(__str_5 >> 8)
095D C0E0      2347            push    acc
095F 7480      2348            mov     a,#0x80
0961 C0E0      2349            push    acc
0963 120100    2350            lcall   _printf
0966 1581      2351            dec     sp
0968 1581      2352            dec     sp
096A 1581      2353            dec     sp
096C           2354   ;        EFM8_I2C_Nunchuck.c:651: if(konamiReady){
096C 3018B0    2355            jnb     _main_konamiReady_1_116,L020051?
096F           2356   ;        EFM8_I2C_Nunchuck.c:652: if(konamiProg == 0 || konamiProg == 1){
096F E5B8      2357            mov     a,_main_konamiProg_1_116
0971 45B9      2358            orl     a,(_main_konamiProg_1_116 + 1)
0973 6001      2359            jz      L020046?
0975 7401      2360            mov     a,#0x01
0977 B5B830    2361            cjne    a,_main_konamiProg_1_116,L020305?
097A E4        2362            clr     a
097B B5B930    2363            cjne    a,(_main_konamiProg_1_116 + 1),L020305?
097E 8001      2364            sjmp    L020306?
0980           2365   L020305?:
0980 8001      2366            sjmp    L020047?
0982           2367   L020306?:
0982           2368   L020046?:
0982           2369   ;        EFM8_I2C_Nunchuck.c:653: konamiProg++;
0982 05B8      2370            inc     _main_konamiProg_1_116
0984 E4        2371            clr     a
0985 B5B8B0    2372            cjne    a,_main_konamiProg_1_116,L020051?
0988 05B9      2373            inc     (_main_konamiProg_1_116 + 1)
098A 8001      2374            sjmp    L020051?
098C           2375   L020047?:
098C           2376   ;        EFM8_I2C_Nunchuck.c:655: konamiProg = 0;
098C E4        2377            clr     a
098D F5B8      2378            mov     _main_konamiProg_1_116,a
098F F5B9      2379            mov     (_main_konamiProg_1_116 + 1),a
0991           2380   L020051?:
0991           2381   ;        EFM8_I2C_Nunchuck.c:658: konamiReady = 0;
0991 C218      2382            clr     _main_konamiReady_1_116
0993           2383   ;        EFM8_I2C_Nunchuck.c:659: koldProg = 0;
0993 E4        2384            clr     a
0994 F508      2385            mov     _main_koldProg_1_116,a
0996 F509      2386            mov     (_main_koldProg_1_116 + 1),a
0998 020100    2387            ljmp    L020128?
099B           2388   L020053?:
099B           2389   ;        EFM8_I2C_Nunchuck.c:661: printf("*N/A* ");
099B 74F0      2390            mov     a,#__str_6
099D C0E0      2391            push    acc
099F 74D9      2392            mov     a,#(__str_6 >> 8)
09A1 C0E0      2393            push    acc
09A3 7480      2394            mov     a,#0x80
09A5 C0E0      2395            push    acc
09A7 120100    2396            lcall   _printf
09AA 1581      2397            dec     sp
09AC 1581      2398            dec     sp
09AE 1581      2399            dec     sp
09B0 020100    2400            ljmp    L020128?
09B3           2401   L020124?:
09B3           2402   ;        EFM8_I2C_Nunchuck.c:663: }else if(joy_y < -JOYMARGIN){          // Backward
09B3 C3        2403            clr     c
09B4 E588      2404            mov     a,_main_joy_y_1_116
09B6 94F6      2405            subb    a,#0xF6
09B8 E589      2406            mov     a,(_main_joy_y_1_116 + 1)
09BA 6480      2407            xrl     a,#0x80
09BC 947F      2408            subb    a,#0x7f
09BE 4001      2409            jc      L020308?
09C0 020100    2410            ljmp    L020121?
09C3           2411   L020308?:
09C3           2412   ;        EFM8_I2C_Nunchuck.c:664: if(joy_x < -JOYMARGIN && (angle > ANGLEMARGIN && angle < (90 - ANGLEMARGIN))){
09C3 C3        2413            clr     c
09C4 E538      2414            mov     a,_main_joy_x_1_116
09C6 94F6      2415            subb    a,#0xF6
09C8 E539      2416            mov     a,(_main_joy_x_1_116 + 1)
09CA 6480      2417            xrl     a,#0x80
09CC 947F      2418            subb    a,#0x7f
09CE 5001      2419            jnc     L020085?
09D0 C3        2420            clr     c
09D1 7414      2421            mov     a,#0x14
09D3 9A        2422            subb    a,r2
09D4 E4        2423            clr     a
09D5 6480      2424            xrl     a,#0x80
09D7 8BF0      2425            mov     b,r3
09D9 63F080    2426            xrl     b,#0x80
09DC 95F0      2427            subb    a,b
09DE 5001      2428            jnc     L020085?
09E0 C3        2429            clr     c
09E1 EA        2430            mov     a,r2
09E2 9446      2431            subb    a,#0x46
09E4 EB        2432            mov     a,r3
09E5 6480      2433            xrl     a,#0x80
09E7 9480      2434            subb    a,#0x80
09E9 5001      2435            jnc     L020085?
09EB           2436   ;        EFM8_I2C_Nunchuck.c:666: signal_stream6 = 1;
09EB D228      2437            setb    _main_signal_stream6_1_116
09ED           2438   ;        EFM8_I2C_Nunchuck.c:667: signal_stream7 = 1;
09ED D278      2439            setb    _main_signal_stream7_1_116
09EF           2440   ;        EFM8_I2C_Nunchuck.c:668: signal_stream8 = 1;
09EF D2C8      2441            setb    _main_signal_stream8_1_116
09F1           2442   ;        EFM8_I2C_Nunchuck.c:669: printf("BLTURN ");
09F1 74F0      2443            mov     a,#__str_7
09F3 C0E0      2444            push    acc
09F5 74DA      2445            mov     a,#(__str_7 >> 8)
09F7 C0E0      2446            push    acc
09F9 7480      2447            mov     a,#0x80
09FB C0E0      2448            push    acc
09FD 120100    2449            lcall   _printf
0A00 1581      2450            dec     sp
0A02 1581      2451            dec     sp
0A04 1581      2452            dec     sp
0A06 020100    2453            ljmp    L020128?
0A09           2454   L020085?:
0A09           2455   ;        EFM8_I2C_Nunchuck.c:670: }else if(joy_x > JOYMARGIN && (angle > ANGLEMARGIN && angle < (90 - ANGLEMARGIN))){
0A09 C3        2456            clr     c
0A0A 740A      2457            mov     a,#0x0A
0A0C 9538      2458            subb    a,_main_joy_x_1_116
0A0E E4        2459            clr     a
0A0F 6480      2460            xrl     a,#0x80
0A11 8539F0    2461            mov     b,(_main_joy_x_1_116 + 1)
0A14 63F080    2462            xrl     b,#0x80
0A17 95F0      2463            subb    a,b
0A19 5001      2464            jnc     L020080?
0A1B C3        2465            clr     c
0A1C 7414      2466            mov     a,#0x14
0A1E 9A        2467            subb    a,r2
0A1F E4        2468            clr     a
0A20 6480      2469            xrl     a,#0x80
0A22 8BF0      2470            mov     b,r3
0A24 63F080    2471            xrl     b,#0x80
0A27 95F0      2472            subb    a,b
0A29 5001      2473            jnc     L020080?
0A2B C3        2474            clr     c
0A2C EA        2475            mov     a,r2
0A2D 9446      2476            subb    a,#0x46
0A2F EB        2477            mov     a,r3
0A30 6480      2478            xrl     a,#0x80
0A32 9480      2479            subb    a,#0x80
0A34 5001      2480            jnc     L020080?
0A36           2481   ;        EFM8_I2C_Nunchuck.c:672: signal_stream5 = 1;
0A36 D2D8      2482            setb    _main_signal_stream5_1_116
0A38           2483   ;        EFM8_I2C_Nunchuck.c:673: printf("BRTURN ");
0A38 7470      2484            mov     a,#__str_8
0A3A C0E0      2485            push    acc
0A3C 74DB      2486            mov     a,#(__str_8 >> 8)
0A3E C0E0      2487            push    acc
0A40 7480      2488            mov     a,#0x80
0A42 C0E0      2489            push    acc
0A44 120100    2490            lcall   _printf
0A47 1581      2491            dec     sp
0A49 1581      2492            dec     sp
0A4B 1581      2493            dec     sp
0A4D 020100    2494            ljmp    L020128?
0A50           2495   L020080?:
0A50           2496   ;        EFM8_I2C_Nunchuck.c:674: }else if( angle > 90 - ANGLEMARGIN){
0A50 C3        2497            clr     c
0A51 7446      2498            mov     a,#0x46
0A53 9A        2499            subb    a,r2
0A54 E4        2500            clr     a
0A55 6480      2501            xrl     a,#0x80
0A57 8BF0      2502            mov     b,r3
0A59 63F080    2503            xrl     b,#0x80
0A5C 95F0      2504            subb    a,b
0A5E 5001      2505            jnc     L020077?
0A60           2506   ;        EFM8_I2C_Nunchuck.c:676: signal_stream6 = 1;
0A60 D228      2507            setb    _main_signal_stream6_1_116
0A62           2508   ;        EFM8_I2C_Nunchuck.c:677: printf("BACK ");
0A62 74F0      2509            mov     a,#__str_9
0A64 C0E0      2510            push    acc
0A66 74DB      2511            mov     a,#(__str_9 >> 8)
0A68 C0E0      2512            push    acc
0A6A 7480      2513            mov     a,#0x80
0A6C C0E0      2514            push    acc
0A6E 120100    2515            lcall   _printf
0A71 1581      2516            dec     sp
0A73 1581      2517            dec     sp
0A75 1581      2518            dec     sp
0A77           2519   ;        EFM8_I2C_Nunchuck.c:679: if(konamiReady){
0A77 301830    2520            jnb     _main_konamiReady_1_116,L020070?
0A7A           2521   ;        EFM8_I2C_Nunchuck.c:680: if(konamiProg == 2 || konamiProg == 3){
0A7A 7402      2522            mov     a,#0x02
0A7C B5B870    2523            cjne    a,_main_konamiProg_1_116,L020317?
0A7F E4        2524            clr     a
0A80 B5B970    2525            cjne    a,(_main_konamiProg_1_116 + 1),L020317?
0A83 8001      2526            sjmp    L020065?
0A85           2527   L020317?:
0A85 7403      2528            mov     a,#0x03
0A87 B5B8F0    2529            cjne    a,_main_konamiProg_1_116,L020318?
0A8A E4        2530            clr     a
0A8B B5B9F0    2531            cjne    a,(_main_konamiProg_1_116 + 1),L020318?
0A8E 8001      2532            sjmp    L020319?
0A90           2533   L020318?:
0A90 8001      2534            sjmp    L020066?
0A92           2535   L020319?:
0A92           2536   L020065?:
0A92           2537   ;        EFM8_I2C_Nunchuck.c:681: konamiProg++;
0A92 05B8      2538            inc     _main_konamiProg_1_116
0A94 E4        2539            clr     a
0A95 B5B830    2540            cjne    a,_main_konamiProg_1_116,L020070?
0A98 05B9      2541            inc     (_main_konamiProg_1_116 + 1)
0A9A 8001      2542            sjmp    L020070?
0A9C           2543   L020066?:
0A9C           2544   ;        EFM8_I2C_Nunchuck.c:683: konamiProg = 0;
0A9C E4        2545            clr     a
0A9D F5B8      2546            mov     _main_konamiProg_1_116,a
0A9F F5B9      2547            mov     (_main_konamiProg_1_116 + 1),a
0AA1           2548   L020070?:
0AA1           2549   ;        EFM8_I2C_Nunchuck.c:686: konamiReady = 0;
0AA1 C218      2550            clr     _main_konamiReady_1_116
0AA3           2551   ;        EFM8_I2C_Nunchuck.c:688: if(koldReady){
0AA3 3068B0    2552            jnb     _main_koldReady_1_116,L020075?
0AA6           2553   ;        EFM8_I2C_Nunchuck.c:689: if(koldProg == 2){
0AA6 7402      2554            mov     a,#0x02
0AA8 B508F0    2555            cjne    a,_main_koldProg_1_116,L020322?
0AAB E4        2556            clr     a
0AAC B509F0    2557            cjne    a,(_main_koldProg_1_116 + 1),L020322?
0AAF 8001      2558            sjmp    L020323?
0AB1           2559   L020322?:
0AB1 8001      2560            sjmp    L020072?
0AB3           2561   L020323?:
0AB3           2562   ;        EFM8_I2C_Nunchuck.c:690: koldProg++;
0AB3 0508      2563            inc     _main_koldProg_1_116
0AB5 E4        2564            clr     a
0AB6 B508B0    2565            cjne    a,_main_koldProg_1_116,L020075?
0AB9 0509      2566            inc     (_main_koldProg_1_116 + 1)
0ABB 8001      2567            sjmp    L020075?
0ABD           2568   L020072?:
0ABD           2569   ;        EFM8_I2C_Nunchuck.c:692: koldProg = 0;
0ABD E4        2570            clr     a
0ABE F508      2571            mov     _main_koldProg_1_116,a
0AC0 F509      2572            mov     (_main_koldProg_1_116 + 1),a
0AC2           2573   L020075?:
0AC2           2574   ;        EFM8_I2C_Nunchuck.c:695: koldReady = 0;
0AC2 C268      2575            clr     _main_koldReady_1_116
0AC4 020100    2576            ljmp    L020128?
0AC7           2577   L020077?:
0AC7           2578   ;        EFM8_I2C_Nunchuck.c:697: printf("*N/A* ");
0AC7 74F0      2579            mov     a,#__str_6
0AC9 C0E0      2580            push    acc
0ACB 74D9      2581            mov     a,#(__str_6 >> 8)
0ACD C0E0      2582            push    acc
0ACF 7480      2583            mov     a,#0x80
0AD1 C0E0      2584            push    acc
0AD3 120100    2585            lcall   _printf
0AD6 1581      2586            dec     sp
0AD8 1581      2587            dec     sp
0ADA 1581      2588            dec     sp
0ADC 020100    2589            ljmp    L020128?
0ADF           2590   L020121?:
0ADF           2591   ;        EFM8_I2C_Nunchuck.c:700: if(joy_x > JOYMARGIN && (angle < ANGLEMARGIN)){
0ADF C3        2592            clr     c
0AE0 740A      2593            mov     a,#0x0A
0AE2 9538      2594            subb    a,_main_joy_x_1_116
0AE4 E4        2595            clr     a
0AE5 6480      2596            xrl     a,#0x80
0AE7 8539F0    2597            mov     b,(_main_joy_x_1_116 + 1)
0AEA 63F080    2598            xrl     b,#0x80
0AED 95F0      2599            subb    a,b
0AEF 5001      2600            jnc     L020117?
0AF1 C3        2601            clr     c
0AF2 EA        2602            mov     a,r2
0AF3 9414      2603            subb    a,#0x14
0AF5 EB        2604            mov     a,r3
0AF6 6480      2605            xrl     a,#0x80
0AF8 9480      2606            subb    a,#0x80
0AFA 5001      2607            jnc     L020117?
0AFC           2608   ;        EFM8_I2C_Nunchuck.c:702: signal_stream7 = 1;
0AFC D278      2609            setb    _main_signal_stream7_1_116
0AFE           2610   ;        EFM8_I2C_Nunchuck.c:703: signal_stream8 = 1;
0AFE D2C8      2611            setb    _main_signal_stream8_1_116
0B00           2612   ;        EFM8_I2C_Nunchuck.c:705: printf("RIGHT ");
0B00 74F0      2613            mov     a,#__str_10
0B02 C0E0      2614            push    acc
0B04 74DE      2615            mov     a,#(__str_10 >> 8)
0B06 C0E0      2616            push    acc
0B08 7480      2617            mov     a,#0x80
0B0A C0E0      2618            push    acc
0B0C 120100    2619            lcall   _printf
0B0F 1581      2620            dec     sp
0B11 1581      2621            dec     sp
0B13 1581      2622            dec     sp
0B15           2623   ;        EFM8_I2C_Nunchuck.c:707: if(konamiReady){
0B15 301830    2624            jnb     _main_konamiReady_1_116,L020094?
0B18           2625   ;        EFM8_I2C_Nunchuck.c:708: if(konamiProg == 5 || konamiProg == 7){
0B18 7405      2626            mov     a,#0x05
0B1A B5B870    2627            cjne    a,_main_konamiProg_1_116,L020328?
0B1D E4        2628            clr     a
0B1E B5B970    2629            cjne    a,(_main_konamiProg_1_116 + 1),L020328?
0B21 8001      2630            sjmp    L020089?
0B23           2631   L020328?:
0B23 7407      2632            mov     a,#0x07
0B25 B5B8F0    2633            cjne    a,_main_konamiProg_1_116,L020329?
0B28 E4        2634            clr     a
0B29 B5B9F0    2635            cjne    a,(_main_konamiProg_1_116 + 1),L020329?
0B2C 8001      2636            sjmp    L020330?
0B2E           2637   L020329?:
0B2E 8001      2638            sjmp    L020090?
0B30           2639   L020330?:
0B30           2640   L020089?:
0B30           2641   ;        EFM8_I2C_Nunchuck.c:709: konamiProg++;
0B30 05B8      2642            inc     _main_konamiProg_1_116
0B32 E4        2643            clr     a
0B33 B5B830    2644            cjne    a,_main_konamiProg_1_116,L020094?
0B36 05B9      2645            inc     (_main_konamiProg_1_116 + 1)
0B38 8001      2646            sjmp    L020094?
0B3A           2647   L020090?:
0B3A           2648   ;        EFM8_I2C_Nunchuck.c:711: konamiProg = 0;
0B3A E4        2649            clr     a
0B3B F5B8      2650            mov     _main_konamiProg_1_116,a
0B3D F5B9      2651            mov     (_main_konamiProg_1_116 + 1),a
0B3F           2652   L020094?:
0B3F           2653   ;        EFM8_I2C_Nunchuck.c:714: konamiReady = 0;
0B3F C218      2654            clr     _main_konamiReady_1_116
0B41           2655   ;        EFM8_I2C_Nunchuck.c:716: if(koldReady){
0B41 3068B0    2656            jnb     _main_koldReady_1_116,L020099?
0B44           2657   ;        EFM8_I2C_Nunchuck.c:717: if(koldProg == 1){
0B44 7401      2658            mov     a,#0x01
0B46 B508F0    2659            cjne    a,_main_koldProg_1_116,L020333?
0B49 E4        2660            clr     a
0B4A B509F0    2661            cjne    a,(_main_koldProg_1_116 + 1),L020333?
0B4D 8001      2662            sjmp    L020334?
0B4F           2663   L020333?:
0B4F 8001      2664            sjmp    L020096?
0B51           2665   L020334?:
0B51           2666   ;        EFM8_I2C_Nunchuck.c:718: koldProg++;
0B51 0508      2667            inc     _main_koldProg_1_116
0B53 E4        2668            clr     a
0B54 B508B0    2669            cjne    a,_main_koldProg_1_116,L020099?
0B57 0509      2670            inc     (_main_koldProg_1_116 + 1)
0B59 8001      2671            sjmp    L020099?
0B5B           2672   L020096?:
0B5B           2673   ;        EFM8_I2C_Nunchuck.c:720: koldProg = 0;
0B5B E4        2674            clr     a
0B5C F508      2675            mov     _main_koldProg_1_116,a
0B5E F509      2676            mov     (_main_koldProg_1_116 + 1),a
0B60           2677   L020099?:
0B60           2678   ;        EFM8_I2C_Nunchuck.c:723: koldReady = 0;
0B60 C268      2679            clr     _main_koldReady_1_116
0B62 020100    2680            ljmp    L020128?
0B65           2681   L020117?:
0B65           2682   ;        EFM8_I2C_Nunchuck.c:724: }else if(joy_x < -JOYMARGIN && (angle < ANGLEMARGIN)){
0B65 C3        2683            clr     c
0B66 E538      2684            mov     a,_main_joy_x_1_116
0B68 94F6      2685            subb    a,#0xF6
0B6A E539      2686            mov     a,(_main_joy_x_1_116 + 1)
0B6C 6480      2687            xrl     a,#0x80
0B6E 947F      2688            subb    a,#0x7f
0B70 5001      2689            jnc     L020113?
0B72 C3        2690            clr     c
0B73 EA        2691            mov     a,r2
0B74 9414      2692            subb    a,#0x14
0B76 EB        2693            mov     a,r3
0B77 6480      2694            xrl     a,#0x80
0B79 9480      2695            subb    a,#0x80
0B7B 5001      2696            jnc     L020113?
0B7D           2697   ;        EFM8_I2C_Nunchuck.c:726: signal_stream7 = 1;
0B7D D278      2698            setb    _main_signal_stream7_1_116
0B7F           2699   ;        EFM8_I2C_Nunchuck.c:727: printf("LEFT ");
0B7F 74F0      2700            mov     a,#__str_11
0B81 C0E0      2701            push    acc
0B83 74E1      2702            mov     a,#(__str_11 >> 8)
0B85 C0E0      2703            push    acc
0B87 7480      2704            mov     a,#0x80
0B89 C0E0      2705            push    acc
0B8B 120100    2706            lcall   _printf
0B8E 1581      2707            dec     sp
0B90 1581      2708            dec     sp
0B92 1581      2709            dec     sp
0B94           2710   ;        EFM8_I2C_Nunchuck.c:729: if(konamiReady){
0B94 301830    2711            jnb     _main_konamiReady_1_116,L020105?
0B97           2712   ;        EFM8_I2C_Nunchuck.c:730: if(konamiProg == 4 || konamiProg == 6){
0B97 7404      2713            mov     a,#0x04
0B99 B5B870    2714            cjne    a,_main_konamiProg_1_116,L020339?
0B9C E4        2715            clr     a
0B9D B5B970    2716            cjne    a,(_main_konamiProg_1_116 + 1),L020339?
0BA0 8001      2717            sjmp    L020100?
0BA2           2718   L020339?:
0BA2 7406      2719            mov     a,#0x06
0BA4 B5B8F0    2720            cjne    a,_main_konamiProg_1_116,L020340?
0BA7 E4        2721            clr     a
0BA8 B5B9F0    2722            cjne    a,(_main_konamiProg_1_116 + 1),L020340?
0BAB 8001      2723            sjmp    L020341?
0BAD           2724   L020340?:
0BAD 8001      2725            sjmp    L020101?
0BAF           2726   L020341?:
0BAF           2727   L020100?:
0BAF           2728   ;        EFM8_I2C_Nunchuck.c:731: konamiProg++;
0BAF 05B8      2729            inc     _main_konamiProg_1_116
0BB1 E4        2730            clr     a
0BB2 B5B830    2731            cjne    a,_main_konamiProg_1_116,L020105?
0BB5 05B9      2732            inc     (_main_konamiProg_1_116 + 1)
0BB7 8001      2733            sjmp    L020105?
0BB9           2734   L020101?:
0BB9           2735   ;        EFM8_I2C_Nunchuck.c:733: konamiProg = 0;
0BB9 E4        2736            clr     a
0BBA F5B8      2737            mov     _main_konamiProg_1_116,a
0BBC F5B9      2738            mov     (_main_konamiProg_1_116 + 1),a
0BBE           2739   L020105?:
0BBE           2740   ;        EFM8_I2C_Nunchuck.c:736: konamiReady = 0;
0BBE C218      2741            clr     _main_konamiReady_1_116
0BC0           2742   ;        EFM8_I2C_Nunchuck.c:738: if(koldReady){
0BC0 3068B0    2743            jnb     _main_koldReady_1_116,L020111?
0BC3           2744   ;        EFM8_I2C_Nunchuck.c:739: if(koldProg == 0 || koldProg == 3){
0BC3 E508      2745            mov     a,_main_koldProg_1_116
0BC5 4509      2746            orl     a,(_main_koldProg_1_116 + 1)
0BC7 6001      2747            jz      L020106?
0BC9 7403      2748            mov     a,#0x03
0BCB B50830    2749            cjne    a,_main_koldProg_1_116,L020345?
0BCE E4        2750            clr     a
0BCF B50930    2751            cjne    a,(_main_koldProg_1_116 + 1),L020345?
0BD2 8001      2752            sjmp    L020346?
0BD4           2753   L020345?:
0BD4 8001      2754            sjmp    L020107?
0BD6           2755   L020346?:
0BD6           2756   L020106?:
0BD6           2757   ;        EFM8_I2C_Nunchuck.c:740: koldProg++;
0BD6 0508      2758            inc     _main_koldProg_1_116
0BD8 E4        2759            clr     a
0BD9 B508B0    2760            cjne    a,_main_koldProg_1_116,L020111?
0BDC 0509      2761            inc     (_main_koldProg_1_116 + 1)
0BDE 8001      2762            sjmp    L020111?
0BE0           2763   L020107?:
0BE0           2764   ;        EFM8_I2C_Nunchuck.c:742: koldProg = 0;
0BE0 E4        2765            clr     a
0BE1 F508      2766            mov     _main_koldProg_1_116,a
0BE3 F509      2767            mov     (_main_koldProg_1_116 + 1),a
0BE5           2768   L020111?:
0BE5           2769   ;        EFM8_I2C_Nunchuck.c:745: koldReady = 0;
0BE5 C268      2770            clr     _main_koldReady_1_116
0BE7 8001      2771            sjmp    L020128?
0BE9           2772   L020113?:
0BE9           2773   ;        EFM8_I2C_Nunchuck.c:747: printf("*N/A* ");
0BE9 74F0      2774            mov     a,#__str_6
0BEB C0E0      2775            push    acc
0BED 74D9      2776            mov     a,#(__str_6 >> 8)
0BEF C0E0      2777            push    acc
0BF1 7480      2778            mov     a,#0x80
0BF3 C0E0      2779            push    acc
0BF5 120100    2780            lcall   _printf
0BF8 1581      2781            dec     sp
0BFA 1581      2782            dec     sp
0BFC 1581      2783            dec     sp
0BFE           2784   L020128?:
0BFE           2785   ;        EFM8_I2C_Nunchuck.c:754: if(accelLoop > 0){
0BFE C3        2786            clr     c
0BFF E4        2787            clr     a
0C00 9558      2788            subb    a,_main_accelLoop_1_116
0C02 E4        2789            clr     a
0C03 6480      2790            xrl     a,#0x80
0C05 8559F0    2791            mov     b,(_main_accelLoop_1_116 + 1)
0C08 63F080    2792            xrl     b,#0x80
0C0B 95F0      2793            subb    a,b
0C0D 5001      2794            jnc     L020144?
0C0F           2795   ;        EFM8_I2C_Nunchuck.c:755: signal_stream1 = 1;
0C0F D2F8      2796            setb    _main_sloc0_1_0
0C11           2797   ;        EFM8_I2C_Nunchuck.c:756: signal_stream2 = 1;
0C11 D238      2798            setb    _main_sloc1_1_0
0C13           2799   ;        EFM8_I2C_Nunchuck.c:757: signal_stream3 = 1;
0C13 D278      2800            setb    _main_sloc2_1_0
0C15           2801   ;        EFM8_I2C_Nunchuck.c:758: signal_stream4 = 1;
0C15 D2B8      2802            setb    _main_sloc3_1_0
0C17 8001      2803            sjmp    L020145?
0C19           2804   L020144?:
0C19           2805   ;        EFM8_I2C_Nunchuck.c:760: if(acc_z <= 150){
0C19 C3        2806            clr     c
0C1A 7496      2807            mov     a,#0x96
0C1C 9518      2808            subb    a,_main_acc_z_1_116
0C1E E4        2809            clr     a
0C1F 6480      2810            xrl     a,#0x80
0C21 8519F0    2811            mov     b,(_main_acc_z_1_116 + 1)
0C24 63F080    2812            xrl     b,#0x80
0C27 95F0      2813            subb    a,b
0C29 4001      2814            jc      L020141?
0C2B           2815   ;        EFM8_I2C_Nunchuck.c:761: accelLoop = -1;
0C2B 7558FF    2816            mov     _main_accelLoop_1_116,#0xFF
0C2E 7559FF    2817            mov     (_main_accelLoop_1_116 + 1),#0xFF
0C31 8001      2818            sjmp    L020145?
0C33           2819   L020141?:
0C33           2820   ;        EFM8_I2C_Nunchuck.c:762: }else if(acc_x >= 800){
0C33 C3        2821            clr     c
0C34 E578      2822            mov     a,_main_acc_x_1_116
0C36 9420      2823            subb    a,#0x20
0C38 E579      2824            mov     a,(_main_acc_x_1_116 + 1)
0C3A 6480      2825            xrl     a,#0x80
0C3C 9483      2826            subb    a,#0x83
0C3E 4001      2827            jc      L020138?
0C40           2828   ;        EFM8_I2C_Nunchuck.c:763: accelLoop = 4;
0C40 755804    2829            mov     _main_accelLoop_1_116,#0x04
0C43 E4        2830            clr     a
0C44 F559      2831            mov     (_main_accelLoop_1_116 + 1),a
0C46 8001      2832            sjmp    L020145?
0C48           2833   L020138?:
0C48           2834   ;        EFM8_I2C_Nunchuck.c:764: }else if(acc_x <= 200){
0C48 C3        2835            clr     c
0C49 74C8      2836            mov     a,#0xC8
0C4B 9578      2837            subb    a,_main_acc_x_1_116
0C4D E4        2838            clr     a
0C4E 6480      2839            xrl     a,#0x80
0C50 8579F0    2840            mov     b,(_main_acc_x_1_116 + 1)
0C53 63F080    2841            xrl     b,#0x80
0C56 95F0      2842            subb    a,b
0C58 4001      2843            jc      L020135?
0C5A           2844   ;        EFM8_I2C_Nunchuck.c:765: accelLoop = 3;
0C5A 755803    2845            mov     _main_accelLoop_1_116,#0x03
0C5D E4        2846            clr     a
0C5E F559      2847            mov     (_main_accelLoop_1_116 + 1),a
0C60 8001      2848            sjmp    L020145?
0C62           2849   L020135?:
0C62           2850   ;        EFM8_I2C_Nunchuck.c:766: }else if(acc_y >= 800){
0C62 C3        2851            clr     c
0C63 E5C8      2852            mov     a,_main_acc_y_1_116
0C65 9420      2853            subb    a,#0x20
0C67 E5C9      2854            mov     a,(_main_acc_y_1_116 + 1)
0C69 6480      2855            xrl     a,#0x80
0C6B 9483      2856            subb    a,#0x83
0C6D 4001      2857            jc      L020132?
0C6F           2858   ;        EFM8_I2C_Nunchuck.c:767: accelLoop = 2;
0C6F 755802    2859            mov     _main_accelLoop_1_116,#0x02
0C72 E4        2860            clr     a
0C73 F559      2861            mov     (_main_accelLoop_1_116 + 1),a
0C75 8001      2862            sjmp    L020145?
0C77           2863   L020132?:
0C77           2864   ;        EFM8_I2C_Nunchuck.c:768: }else if(acc_y <= 200){
0C77 C3        2865            clr     c
0C78 74C8      2866            mov     a,#0xC8
0C7A 95C8      2867            subb    a,_main_acc_y_1_116
0C7C E4        2868            clr     a
0C7D 6480      2869            xrl     a,#0x80
0C7F 85C9F0    2870            mov     b,(_main_acc_y_1_116 + 1)
0C82 63F080    2871            xrl     b,#0x80
0C85 95F0      2872            subb    a,b
0C87 4001      2873            jc      L020145?
0C89           2874   ;        EFM8_I2C_Nunchuck.c:769: accelLoop = 1;
0C89 755801    2875            mov     _main_accelLoop_1_116,#0x01
0C8C E4        2876            clr     a
0C8D F559      2877            mov     (_main_accelLoop_1_116 + 1),a
0C8F           2878   L020145?:
0C8F           2879   ;        EFM8_I2C_Nunchuck.c:773: if(accelLoop == 4 || c == 'P'){
0C8F 7404      2880            mov     a,#0x04
0C91 B55870    2881            cjne    a,_main_accelLoop_1_116,L020354?
0C94 E4        2882            clr     a
0C95 B55970    2883            cjne    a,(_main_accelLoop_1_116 + 1),L020354?
0C98 8001      2884            sjmp    L020165?
0C9A           2885   L020354?:
0C9A 7450      2886            mov     a,#0x50
0C9C B550F0    2887            cjne    a,_c,L020166?
0C9F           2888   L020165?:
0C9F           2889   ;        EFM8_I2C_Nunchuck.c:775: signal_stream5 = 0;
0C9F C2D8      2890            clr     _main_signal_stream5_1_116
0CA1           2891   ;        EFM8_I2C_Nunchuck.c:776: signal_stream6 = 0;
0CA1 C228      2892            clr     _main_signal_stream6_1_116
0CA3           2893   ;        EFM8_I2C_Nunchuck.c:777: signal_stream7 = 1;
0CA3 D278      2894            setb    _main_signal_stream7_1_116
0CA5           2895   ;        EFM8_I2C_Nunchuck.c:778: signal_stream8 = 0;
0CA5 C2C8      2896            clr     _main_signal_stream8_1_116
0CA7           2897   ;        EFM8_I2C_Nunchuck.c:779: accelLoop = 4;
0CA7 755804    2898            mov     _main_accelLoop_1_116,#0x04
0CAA E4        2899            clr     a
0CAB F559      2900            mov     (_main_accelLoop_1_116 + 1),a
0CAD           2901   ;        EFM8_I2C_Nunchuck.c:780: if(DEBUG) printf(" Shake left ");
0CAD 8001      2902            sjmp    L020170?
0CAF           2903   L020166?:
0CAF           2904   ;        EFM8_I2C_Nunchuck.c:781: }else if(accelLoop == 3 || c == 'X'){                  
0CAF 7403      2905            mov     a,#0x03
0CB1 B55870    2906            cjne    a,_main_accelLoop_1_116,L020357?
0CB4 E4        2907            clr     a
0CB5 B55970    2908            cjne    a,(_main_accelLoop_1_116 + 1),L020357?
0CB8 8001      2909            sjmp    L020161?
0CBA           2910   L020357?:
0CBA 7458      2911            mov     a,#0x58
0CBC B550F0    2912            cjne    a,_c,L020162?
0CBF           2913   L020161?:
0CBF           2914   ;        EFM8_I2C_Nunchuck.c:783: signal_stream5 = 0;
0CBF C2D8      2915            clr     _main_signal_stream5_1_116
0CC1           2916   ;        EFM8_I2C_Nunchuck.c:784: signal_stream6 = 0;
0CC1 C228      2917            clr     _main_signal_stream6_1_116
0CC3           2918   ;        EFM8_I2C_Nunchuck.c:785: signal_stream7 = 1;
0CC3 D278      2919            setb    _main_signal_stream7_1_116
0CC5           2920   ;        EFM8_I2C_Nunchuck.c:786: signal_stream8 = 1;
0CC5 D2C8      2921            setb    _main_signal_stream8_1_116
0CC7           2922   ;        EFM8_I2C_Nunchuck.c:787: accelLoop = 3;
0CC7 755803    2923            mov     _main_accelLoop_1_116,#0x03
0CCA E4        2924            clr     a
0CCB F559      2925            mov     (_main_accelLoop_1_116 + 1),a
0CCD           2926   ;        EFM8_I2C_Nunchuck.c:788: if(DEBUG) printf(" Shake right ");
0CCD 8001      2927            sjmp    L020170?
0CCF           2928   L020162?:
0CCF           2929   ;        EFM8_I2C_Nunchuck.c:789: }else if(accelLoop == 2 || c == 'N'){
0CCF 7402      2930            mov     a,#0x02
0CD1 B55830    2931            cjne    a,_main_accelLoop_1_116,L020360?
0CD4 E4        2932            clr     a
0CD5 B55930    2933            cjne    a,(_main_accelLoop_1_116 + 1),L020360?
0CD8 8001      2934            sjmp    L020157?
0CDA           2935   L020360?:
0CDA 744E      2936            mov     a,#0x4E
0CDC B550B0    2937            cjne    a,_c,L020158?
0CDF           2938   L020157?:
0CDF           2939   ;        EFM8_I2C_Nunchuck.c:791: signal_stream5 = 0;
0CDF C2D8      2940            clr     _main_signal_stream5_1_116
0CE1           2941   ;        EFM8_I2C_Nunchuck.c:792: signal_stream6 = 1;
0CE1 D228      2942            setb    _main_signal_stream6_1_116
0CE3           2943   ;        EFM8_I2C_Nunchuck.c:793: signal_stream7 = 0;
0CE3 C278      2944            clr     _main_signal_stream7_1_116
0CE5           2945   ;        EFM8_I2C_Nunchuck.c:794: signal_stream8 = 0;
0CE5 C2C8      2946            clr     _main_signal_stream8_1_116
0CE7           2947   ;        EFM8_I2C_Nunchuck.c:795: accelLoop = 2;
0CE7 755802    2948            mov     _main_accelLoop_1_116,#0x02
0CEA E4        2949            clr     a
0CEB F559      2950            mov     (_main_accelLoop_1_116 + 1),a
0CED           2951   ;        EFM8_I2C_Nunchuck.c:796: if(DEBUG) printf(" Shake back ");
0CED 8001      2952            sjmp    L020170?
0CEF           2953   L020158?:
0CEF           2954   ;        EFM8_I2C_Nunchuck.c:797: }else if(accelLoop == 1 || c == 'O'){
0CEF 7401      2955            mov     a,#0x01
0CF1 B558F0    2956            cjne    a,_main_accelLoop_1_116,L020363?
0CF4 E4        2957            clr     a
0CF5 B559F0    2958            cjne    a,(_main_accelLoop_1_116 + 1),L020363?
0CF8 8001      2959            sjmp    L020154?
0CFA           2960   L020363?:
0CFA 744F      2961            mov     a,#0x4F
0CFC B55030    2962            cjne    a,_c,L020170?
0CFF           2963   L020154?:
0CFF           2964   ;        EFM8_I2C_Nunchuck.c:799: signal_stream5 = 0;
0CFF C2D8      2965            clr     _main_signal_stream5_1_116
0D01           2966   ;        EFM8_I2C_Nunchuck.c:800: signal_stream6 = 0;
0D01 C228      2967            clr     _main_signal_stream6_1_116
0D03           2968   ;        EFM8_I2C_Nunchuck.c:801: signal_stream7 = 0;                    
0D03 C278      2969            clr     _main_signal_stream7_1_116
0D05           2970   ;        EFM8_I2C_Nunchuck.c:802: signal_stream8 = 1;
0D05 D2C8      2971            setb    _main_signal_stream8_1_116
0D07           2972   ;        EFM8_I2C_Nunchuck.c:803: accelLoop = 1;
0D07 755801    2973            mov     _main_accelLoop_1_116,#0x01
0D0A E4        2974            clr     a
0D0B F559      2975            mov     (_main_accelLoop_1_116 + 1),a
0D0D           2976   ;        EFM8_I2C_Nunchuck.c:811: printf("%d%d%d%d%d | ",signal_stream4,signal_stream5,signal_stream6,signal_stream7,signal_stream8);
0D0D           2977   L020170?:
0D0D           2978   ;        EFM8_I2C_Nunchuck.c:820: if(koldProg == 5){
0D0D 7405      2979            mov     a,#0x05
0D0F B50870    2980            cjne    a,_main_koldProg_1_116,L020366?
0D12 E4        2981            clr     a
0D13 B50970    2982            cjne    a,(_main_koldProg_1_116 + 1),L020366?
0D16 8001      2983            sjmp    L020367?
0D18           2984   L020366?:
0D18 8001      2985            sjmp    L020178?
0D1A           2986   L020367?:
0D1A           2987   ;        EFM8_I2C_Nunchuck.c:821: signal_stream1 = 1;
0D1A D2F8      2988            setb    _main_sloc0_1_0
0D1C           2989   ;        EFM8_I2C_Nunchuck.c:822: signal_stream2 = 1;
0D1C D238      2990            setb    _main_sloc1_1_0
0D1E           2991   ;        EFM8_I2C_Nunchuck.c:823: signal_stream3 = 1;
0D1E D278      2992            setb    _main_sloc2_1_0
0D20           2993   ;        EFM8_I2C_Nunchuck.c:824: signal_stream4 = 1;
0D20 D2B8      2994            setb    _main_sloc3_1_0
0D22           2995   ;        EFM8_I2C_Nunchuck.c:825: printf("[FATALITY]\n10\n");
0D22 7430      2996            mov     a,#__str_18
0D24 C0E0      2997            push    acc
0D26 74EA      2998            mov     a,#(__str_18 >> 8)
0D28 C0E0      2999            push    acc
0D2A 7480      3000            mov     a,#0x80
0D2C C0E0      3001            push    acc
0D2E 120100    3002            lcall   _printf
0D31 1581      3003            dec     sp
0D33 1581      3004            dec     sp
0D35 1581      3005            dec     sp
0D37           3006   ;        EFM8_I2C_Nunchuck.c:828: if(shakeDir){
0D37 30B870    3007            jnb     _main_shakeDir_1_116,L020172?
0D3A           3008   ;        EFM8_I2C_Nunchuck.c:830: signal_stream5 = 0;
0D3A C2D8      3009            clr     _main_signal_stream5_1_116
0D3C           3010   ;        EFM8_I2C_Nunchuck.c:831: signal_stream6 = 0;
0D3C C228      3011            clr     _main_signal_stream6_1_116
0D3E           3012   ;        EFM8_I2C_Nunchuck.c:832: signal_stream7 = 0;
0D3E C278      3013            clr     _main_signal_stream7_1_116
0D40           3014   ;        EFM8_I2C_Nunchuck.c:833: signal_stream8 = 1;
0D40 D2C8      3015            setb    _main_signal_stream8_1_116
0D42           3016   ;        EFM8_I2C_Nunchuck.c:834: Timer4ms(SIGNALDELAY/2);
0D42 758205    3017            mov     dpl,#0x05
0D45 120100    3018            lcall   _Timer4ms
0D48 8001      3019            sjmp    L020173?
0D4A           3020   L020172?:
0D4A           3021   ;        EFM8_I2C_Nunchuck.c:837: signal_stream5 = 0;
0D4A C2D8      3022            clr     _main_signal_stream5_1_116
0D4C           3023   ;        EFM8_I2C_Nunchuck.c:838: signal_stream6 = 1;
0D4C D228      3024            setb    _main_signal_stream6_1_116
0D4E           3025   ;        EFM8_I2C_Nunchuck.c:839: signal_stream7 = 0;
0D4E C278      3026            clr     _main_signal_stream7_1_116
0D50           3027   ;        EFM8_I2C_Nunchuck.c:840: signal_stream8 = 0;
0D50 C2C8      3028            clr     _main_signal_stream8_1_116
0D52           3029   ;        EFM8_I2C_Nunchuck.c:841: Timer4ms(SIGNALDELAY/2);
0D52 758205    3030            mov     dpl,#0x05
0D55 120100    3031            lcall   _Timer4ms
0D58           3032   L020173?:
0D58           3033   ;        EFM8_I2C_Nunchuck.c:843: shakeDir = !shakeDir;
0D58 B2B8      3034            cpl     _main_shakeDir_1_116
0D5A 8001      3035            sjmp    L020179?
0D5C           3036   L020178?:
0D5C           3037   ;        EFM8_I2C_Nunchuck.c:844: }else if(konamiProg == 10){
0D5C 740A      3038            mov     a,#0x0A
0D5E B5B830    3039            cjne    a,_main_konamiProg_1_116,L020369?
0D61 E4        3040            clr     a
0D62 B5B930    3041            cjne    a,(_main_konamiProg_1_116 + 1),L020369?
0D65 8001      3042            sjmp    L020370?
0D67           3043   L020369?:
0D67 8001      3044            sjmp    L020175?
0D69           3045   L020370?:
0D69           3046   ;        EFM8_I2C_Nunchuck.c:845: signal_stream1 = 1;
0D69 D2F8      3047            setb    _main_sloc0_1_0
0D6B           3048   ;        EFM8_I2C_Nunchuck.c:846: signal_stream2 = 1;
0D6B D238      3049            setb    _main_sloc1_1_0
0D6D           3050   ;        EFM8_I2C_Nunchuck.c:847: signal_stream3 = 1;
0D6D D278      3051            setb    _main_sloc2_1_0
0D6F           3052   ;        EFM8_I2C_Nunchuck.c:848: signal_stream4 = 1;
0D6F D2B8      3053            setb    _main_sloc3_1_0
0D71           3054   ;        EFM8_I2C_Nunchuck.c:851: signal_stream5 = 0;
0D71 C2D8      3055            clr     _main_signal_stream5_1_116
0D73           3056   ;        EFM8_I2C_Nunchuck.c:852: signal_stream6 = 0;
0D73 C228      3057            clr     _main_signal_stream6_1_116
0D75           3058   ;        EFM8_I2C_Nunchuck.c:853: signal_stream7 = 1;
0D75 D278      3059            setb    _main_signal_stream7_1_116
0D77           3060   ;        EFM8_I2C_Nunchuck.c:854: signal_stream8 = 0;
0D77 C2C8      3061            clr     _main_signal_stream8_1_116
0D79 8001      3062            sjmp    L020179?
0D7B           3063   L020175?:
0D7B           3064   ;        EFM8_I2C_Nunchuck.c:856: printf("\n1\n");
0D7B 74F0      3065            mov     a,#__str_19
0D7D C0E0      3066            push    acc
0D7F 74EB      3067            mov     a,#(__str_19 >> 8)
0D81 C0E0      3068            push    acc
0D83 7480      3069            mov     a,#0x80
0D85 C0E0      3070            push    acc
0D87 120100    3071            lcall   _printf
0D8A 1581      3072            dec     sp
0D8C 1581      3073            dec     sp
0D8E 1581      3074            dec     sp
0D90           3075   L020179?:
0D90           3076   ;        EFM8_I2C_Nunchuck.c:877: ET2=1;
0D90 D2AD      3077            setb    _ET2
0D92           3078   ;        EFM8_I2C_Nunchuck.c:878: send:          
0D92           3079   L020180?:
0D92           3080   ;        EFM8_I2C_Nunchuck.c:880: ES0 = 0;
0D92 C2AC      3081            clr     _ES0
0D94           3082   ;        EFM8_I2C_Nunchuck.c:881: ET2 = signal_stream0;
0D94 A288      3083            mov     c,_main_signal_stream0_1_116
0D96 92AD      3084            mov     _ET2,c
0D98           3085   ;        EFM8_I2C_Nunchuck.c:882: Timer4ms(SIGNALDELAY);
0D98 75820A    3086            mov     dpl,#0x0A
0D9B 120100    3087            lcall   _Timer4ms
0D9E           3088   ;        EFM8_I2C_Nunchuck.c:884: ET2 = signal_stream1;
0D9E A2F8      3089            mov     c,_main_sloc0_1_0
0DA0 92AD      3090            mov     _ET2,c
0DA2           3091   ;        EFM8_I2C_Nunchuck.c:885: Timer4ms(SIGNALDELAY);
0DA2 75820A    3092            mov     dpl,#0x0A
0DA5 120100    3093            lcall   _Timer4ms
0DA8           3094   ;        EFM8_I2C_Nunchuck.c:886: ET2 = signal_stream2;
0DA8 A238      3095            mov     c,_main_sloc1_1_0
0DAA 92AD      3096            mov     _ET2,c
0DAC           3097   ;        EFM8_I2C_Nunchuck.c:887: Timer4ms(SIGNALDELAY);
0DAC 75820A    3098            mov     dpl,#0x0A
0DAF 120100    3099            lcall   _Timer4ms
0DB2           3100   ;        EFM8_I2C_Nunchuck.c:888: ET2 = signal_stream3;
0DB2 A278      3101            mov     c,_main_sloc2_1_0
0DB4 92AD      3102            mov     _ET2,c
0DB6           3103   ;        EFM8_I2C_Nunchuck.c:889: Timer4ms(SIGNALDELAY);
0DB6 75820A    3104            mov     dpl,#0x0A
0DB9 120100    3105            lcall   _Timer4ms
0DBC           3106   ;        EFM8_I2C_Nunchuck.c:890: ET2 = signal_stream4;
0DBC A2B8      3107            mov     c,_main_sloc3_1_0
0DBE 92AD      3108            mov     _ET2,c
0DC0           3109   ;        EFM8_I2C_Nunchuck.c:891: Timer4ms(SIGNALDELAY);
0DC0 75820A    3110            mov     dpl,#0x0A
0DC3 120100    3111            lcall   _Timer4ms
0DC6           3112   ;        EFM8_I2C_Nunchuck.c:893: ET2 = signal_stream5;
0DC6 A2D8      3113            mov     c,_main_signal_stream5_1_116
0DC8 92AD      3114            mov     _ET2,c
0DCA           3115   ;        EFM8_I2C_Nunchuck.c:894: Timer4ms(SIGNALDELAY);
0DCA 75820A    3116            mov     dpl,#0x0A
0DCD 120100    3117            lcall   _Timer4ms
0DD0           3118   ;        EFM8_I2C_Nunchuck.c:895: ET2 = signal_stream6;
0DD0 A228      3119            mov     c,_main_signal_stream6_1_116
0DD2 92AD      3120            mov     _ET2,c
0DD4           3121   ;        EFM8_I2C_Nunchuck.c:896: Timer4ms(SIGNALDELAY);
0DD4 75820A    3122            mov     dpl,#0x0A
0DD7 120100    3123            lcall   _Timer4ms
0DDA           3124   ;        EFM8_I2C_Nunchuck.c:897: ET2 = signal_stream7;
0DDA A278      3125            mov     c,_main_signal_stream7_1_116
0DDC 92AD      3126            mov     _ET2,c
0DDE           3127   ;        EFM8_I2C_Nunchuck.c:898: Timer4ms(SIGNALDELAY);
0DDE 75820A    3128            mov     dpl,#0x0A
0DE1 120100    3129            lcall   _Timer4ms
0DE4           3130   ;        EFM8_I2C_Nunchuck.c:899: ET2 = signal_stream8;
0DE4 A2C8      3131            mov     c,_main_signal_stream8_1_116
0DE6 92AD      3132            mov     _ET2,c
0DE8           3133   ;        EFM8_I2C_Nunchuck.c:900: Timer4ms(SIGNALDELAY);
0DE8 75820A    3134            mov     dpl,#0x0A
0DEB 120100    3135            lcall   _Timer4ms
0DEE           3136   ;        EFM8_I2C_Nunchuck.c:902: ET2=0;
0DEE C2AD      3137            clr     _ET2
0DF0           3138   ;        EFM8_I2C_Nunchuck.c:903: Timer4ms(8);
0DF0 758208    3139            mov     dpl,#0x08
0DF3 120100    3140            lcall   _Timer4ms
0DF6           3141   ;        EFM8_I2C_Nunchuck.c:905: ES0 = 1;
0DF6 D2AC      3142            setb    _ES0
0DF8           3143   ;        EFM8_I2C_Nunchuck.c:907: if(BUTT3)
0DF8 30A530    3144            jnb     _P2_5,L020371?
0DFB 020100    3145            ljmp    L020182?
0DFE           3146   L020371?:
0DFE           3147   ;        EFM8_I2C_Nunchuck.c:909: f+= 50;
0DFE 7432      3148            mov     a,#0x32
0E00 2598      3149            add     a,_main_f_1_116
0E02 F598      3150            mov     _main_f_1_116,a
0E04 E4        3151            clr     a
0E05 3599      3152            addc    a,(_main_f_1_116 + 1)
0E07 F599      3153            mov     (_main_f_1_116 + 1),a
0E09 E4        3154            clr     a
0E0A 359A      3155            addc    a,(_main_f_1_116 + 2)
0E0C F59A      3156            mov     (_main_f_1_116 + 2),a
0E0E E4        3157            clr     a
0E0F 359B      3158            addc    a,(_main_f_1_116 + 3)
0E11 F59B      3159            mov     (_main_f_1_116 + 3),a
0E13           3160   ;        EFM8_I2C_Nunchuck.c:910: x=(SYSCLK/(2L*f));
0E13 E598      3161            mov     a,_main_f_1_116
0E15 2598      3162            add     a,_main_f_1_116
0E17 F500      3163            mov     __divulong_PARM_2,a
0E19 E599      3164            mov     a,(_main_f_1_116 + 1)
0E1B 33        3165            rlc     a
0E1C F501      3166            mov     (__divulong_PARM_2 + 1),a
0E1E E59A      3167            mov     a,(_main_f_1_116 + 2)
0E20 33        3168            rlc     a
0E21 F502      3169            mov     (__divulong_PARM_2 + 2),a
0E23 E59B      3170            mov     a,(_main_f_1_116 + 3)
0E25 33        3171            rlc     a
0E26 F503      3172            mov     (__divulong_PARM_2 + 3),a
0E28 906C00    3173            mov     dptr,#0x6C00
0E2B 75F0DC    3174            mov     b,#0xDC
0E2E 7402      3175            mov     a,#0x02
0E30 120100    3176            lcall   __divulong
0E33 858258    3177            mov     _main_x_1_116,dpl
0E36 858359    3178            mov     (_main_x_1_116 + 1),dph
0E39 85F05A    3179            mov     (_main_x_1_116 + 2),b
0E3C F55B      3180            mov     (_main_x_1_116 + 3),a
0E3E           3181   ;        EFM8_I2C_Nunchuck.c:911: TR2=0;                                 // Stop timer 2
0E3E C2CA      3182            clr     _TR2
0E40           3183   ;        EFM8_I2C_Nunchuck.c:912: TMR2RL=0x10000L-x;     // Change reload value for new frequency
0E40 E4        3184            clr     a
0E41 C3        3185            clr     c
0E42 9558      3186            subb    a,_main_x_1_116
0E44 FE        3187            mov     r6,a
0E45 E4        3188            clr     a
0E46 9559      3189            subb    a,(_main_x_1_116 + 1)
0E48 FF        3190            mov     r7,a
0E49 7401      3191            mov     a,#0x01
0E4B 955A      3192            subb    a,(_main_x_1_116 + 2)
0E4D E4        3193            clr     a
0E4E 955B      3194            subb    a,(_main_x_1_116 + 3)
0E50 8ECA      3195            mov     _TMR2RL,r6
0E52 8FCB      3196            mov     (_TMR2RL >> 8),r7
0E54           3197   ;        EFM8_I2C_Nunchuck.c:913: TR2=1;                                 // Start timer 2
0E54 D2CA      3198            setb    _TR2
0E56           3199   ;        EFM8_I2C_Nunchuck.c:914: f=SYSCLK/(2L*(0x10000L-TMR2RL));               
0E56 AACA      3200            mov     r2,_TMR2RL
0E58 ABCB      3201            mov     r3,(_TMR2RL >> 8)
0E5A E4        3202            clr     a
0E5B FC        3203            mov     r4,a
0E5C FD        3204            mov     r5,a
0E5D C3        3205            clr     c
0E5E 9A        3206            subb    a,r2
0E5F FA        3207            mov     r2,a
0E60 E4        3208            clr     a
0E61 9B        3209            subb    a,r3
0E62 FB        3210            mov     r3,a
0E63 7401      3211            mov     a,#0x01
0E65 9C        3212            subb    a,r4
0E66 FC        3213            mov     r4,a
0E67 E4        3214            clr     a
0E68 9D        3215            subb    a,r5
0E69 FD        3216            mov     r5,a
0E6A EA        3217            mov     a,r2
0E6B 2A        3218            add     a,r2
0E6C F500      3219            mov     __divslong_PARM_2,a
0E6E EB        3220            mov     a,r3
0E6F 33        3221            rlc     a
0E70 F501      3222            mov     (__divslong_PARM_2 + 1),a
0E72 EC        3223            mov     a,r4
0E73 33        3224            rlc     a
0E74 F502      3225            mov     (__divslong_PARM_2 + 2),a
0E76 ED        3226            mov     a,r5
0E77 33        3227            rlc     a
0E78 F503      3228            mov     (__divslong_PARM_2 + 3),a
0E7A 906C00    3229            mov     dptr,#0x6C00
0E7D 75F0DC    3230            mov     b,#0xDC
0E80 7402      3231            mov     a,#0x02
0E82 120100    3232            lcall   __divslong
0E85 858298    3233            mov     _main_f_1_116,dpl
0E88 858399    3234            mov     (_main_f_1_116 + 1),dph
0E8B 85F09A    3235            mov     (_main_f_1_116 + 2),b
0E8E F59B      3236            mov     (_main_f_1_116 + 3),a
0E90           3237   L020182?:
0E90           3238   ;        EFM8_I2C_Nunchuck.c:916: if(BUTT2)
0E90 30B040    3239            jnb     _P3_0,L020372?
0E93 020100    3240            ljmp    L020188?
0E96           3241   L020372?:
0E96           3242   ;        EFM8_I2C_Nunchuck.c:918: f-=50;
0E96 E598      3243            mov     a,_main_f_1_116
0E98 24CE      3244            add     a,#0xce
0E9A F598      3245            mov     _main_f_1_116,a
0E9C E599      3246            mov     a,(_main_f_1_116 + 1)
0E9E 34FF      3247            addc    a,#0xff
0EA0 F599      3248            mov     (_main_f_1_116 + 1),a
0EA2 E59A      3249            mov     a,(_main_f_1_116 + 2)
0EA4 34FF      3250            addc    a,#0xff
0EA6 F59A      3251            mov     (_main_f_1_116 + 2),a
0EA8 E59B      3252            mov     a,(_main_f_1_116 + 3)
0EAA 34FF      3253            addc    a,#0xff
0EAC F59B      3254            mov     (_main_f_1_116 + 3),a
0EAE           3255   ;        EFM8_I2C_Nunchuck.c:919: x=(SYSCLK/(2L*f));
0EAE E598      3256            mov     a,_main_f_1_116
0EB0 2598      3257            add     a,_main_f_1_116
0EB2 F500      3258            mov     __divulong_PARM_2,a
0EB4 E599      3259            mov     a,(_main_f_1_116 + 1)
0EB6 33        3260            rlc     a
0EB7 F501      3261            mov     (__divulong_PARM_2 + 1),a
0EB9 E59A      3262            mov     a,(_main_f_1_116 + 2)
0EBB 33        3263            rlc     a
0EBC F502      3264            mov     (__divulong_PARM_2 + 2),a
0EBE E59B      3265            mov     a,(_main_f_1_116 + 3)
0EC0 33        3266            rlc     a
0EC1 F503      3267            mov     (__divulong_PARM_2 + 3),a
0EC3 906C00    3268            mov     dptr,#0x6C00
0EC6 75F0DC    3269            mov     b,#0xDC
0EC9 7402      3270            mov     a,#0x02
0ECB 120100    3271            lcall   __divulong
0ECE 858258    3272            mov     _main_x_1_116,dpl
0ED1 858359    3273            mov     (_main_x_1_116 + 1),dph
0ED4 85F05A    3274            mov     (_main_x_1_116 + 2),b
0ED7 F55B      3275            mov     (_main_x_1_116 + 3),a
0ED9           3276   ;        EFM8_I2C_Nunchuck.c:920: TR2=0;                                 // Stop timer 2
0ED9 C2CA      3277            clr     _TR2
0EDB           3278   ;        EFM8_I2C_Nunchuck.c:921: TMR2RL=0x10000L-x;     // Change reload value for new frequency
0EDB E4        3279            clr     a
0EDC C3        3280            clr     c
0EDD 9558      3281            subb    a,_main_x_1_116
0EDF FA        3282            mov     r2,a
0EE0 E4        3283            clr     a
0EE1 9559      3284            subb    a,(_main_x_1_116 + 1)
0EE3 FB        3285            mov     r3,a
0EE4 7401      3286            mov     a,#0x01
0EE6 955A      3287            subb    a,(_main_x_1_116 + 2)
0EE8 E4        3288            clr     a
0EE9 955B      3289            subb    a,(_main_x_1_116 + 3)
0EEB 8ACA      3290            mov     _TMR2RL,r2
0EED 8BCB      3291            mov     (_TMR2RL >> 8),r3
0EEF           3292   ;        EFM8_I2C_Nunchuck.c:922: TR2=1;                                 // Start timer 2
0EEF D2CA      3293            setb    _TR2
0EF1           3294   ;        EFM8_I2C_Nunchuck.c:923: f=SYSCLK/(2L*(0x10000L-TMR2RL));
0EF1 AACA      3295            mov     r2,_TMR2RL
0EF3 ABCB      3296            mov     r3,(_TMR2RL >> 8)
0EF5 E4        3297            clr     a
0EF6 FC        3298            mov     r4,a
0EF7 FD        3299            mov     r5,a
0EF8 C3        3300            clr     c
0EF9 9A        3301            subb    a,r2
0EFA FA        3302            mov     r2,a
0EFB E4        3303            clr     a
0EFC 9B        3304            subb    a,r3
0EFD FB        3305            mov     r3,a
0EFE 7401      3306            mov     a,#0x01
0F00 9C        3307            subb    a,r4
0F01 FC        3308            mov     r4,a
0F02 E4        3309            clr     a
0F03 9D        3310            subb    a,r5
0F04 FD        3311            mov     r5,a
0F05 EA        3312            mov     a,r2
0F06 2A        3313            add     a,r2
0F07 F500      3314            mov     __divslong_PARM_2,a
0F09 EB        3315            mov     a,r3
0F0A 33        3316            rlc     a
0F0B F501      3317            mov     (__divslong_PARM_2 + 1),a
0F0D EC        3318            mov     a,r4
0F0E 33        3319            rlc     a
0F0F F502      3320            mov     (__divslong_PARM_2 + 2),a
0F11 ED        3321            mov     a,r5
0F12 33        3322            rlc     a
0F13 F503      3323            mov     (__divslong_PARM_2 + 3),a
0F15 906C00    3324            mov     dptr,#0x6C00
0F18 75F0DC    3325            mov     b,#0xDC
0F1B 7402      3326            mov     a,#0x02
0F1D 120100    3327            lcall   __divslong
0F20 858298    3328            mov     _main_f_1_116,dpl
0F23 858399    3329            mov     (_main_f_1_116 + 1),dph
0F26 85F09A    3330            mov     (_main_f_1_116 + 2),b
0F29 F59B      3331            mov     (_main_f_1_116 + 3),a
0F2B           3332   ;        EFM8_I2C_Nunchuck.c:925: if(DEBUG) printf("    freq now: %lu",f);
0F2B 020100    3333            ljmp    L020188?
0F2E           3334            rseg R_CSEG
0F2E           3335   
0000           3336            rseg R_XINIT
0000           3337   
0000           3338            rseg R_CONST
0000           3339   __str_0:
0000 41434345  3340            db 'ACCEL '
     4C20
0006 00        3341            db 0x00
0007           3342   __str_1:
0007 53544F50  3343            db 'STOP '
     20
000C 00        3344            db 0x00
000D           3345   __str_2:
000D 49444C45  3346            db 'IDLE '
     20
0012 00        3347            db 0x00
0013           3348   __str_3:
0013 4C545552  3349            db 'LTURN '
     4E20
0019 00        3350            db 0x00
001A           3351   __str_4:
001A 52545552  3352            db 'RTURN '
     4E20
0020 00        3353            db 0x00
0021           3354   __str_5:
0021 474F20    3355            db 'GO '
0024 00        3356            db 0x00
0025           3357   __str_6:
0025 2A4E2F41  3358            db '*N/A* '
     2A20
002B 00        3359            db 0x00
002C           3360   __str_7:
002C 424C5455  3361            db 'BLTURN '
     524E20
0033 00        3362            db 0x00
0034           3363   __str_8:
0034 42525455  3364            db 'BRTURN '
     524E20
003B 00        3365            db 0x00
003C           3366   __str_9:
003C 4241434B  3367            db 'BACK '
     20
0041 00        3368            db 0x00
0042           3369   __str_10:
0042 52494748  3370            db 'RIGHT '
     5420
0048 00        3371            db 0x00
0049           3372   __str_11:
0049 4C454654  3373            db 'LEFT '
     20
004E 00        3374            db 0x00
004F           3375   __str_12:
004F 20536861  3376            db ' Shake left '
     6B65206C
     65667420
005B 00        3377            db 0x00
005C           3378   __str_13:
005C 20536861  3379            db ' Shake right '
     6B652072
     69676874
     20
0069 00        3380            db 0x00
006A           3381   __str_14:
006A 20536861  3382            db ' Shake back '
     6B652062
     61636B20
0076 00        3383            db 0x00
0077           3384   __str_15:
0077 20536861  3385            db ' Shake GO '
     6B652047
     4F20
0081 00        3386            db 0x00
0082           3387   __str_16:
0082 42697473  3388            db 'Bitstream: %d%d%d%d'
     74726561
     6D3A2025
     64256425
     642564
0095 00        3389            db 0x00
0096           3390   __str_17:
0096 25642564  3391            db '%d%d%d%d%d | '
     25642564
     2564207C
     20
00A3 00        3392            db 0x00
00A4           3393   __str_18:
00A4 5B464154  3394            db '[FATALITY]'
     414C4954
     595D
00AE 0A        3395            db 0x0A
00AF 3130      3396            db '10'
00B1 0A        3397            db 0x0A
00B2 00        3398            db 0x00
00B3           3399   __str_19:
00B3 0A        3400            db 0x0A
00B4 31        3401            db '1'
00B5 0A        3402            db 0x0A
00B6 00        3403            db 0x00
00B7           3404   __str_20:
00B7 20202020  3405            db '    freq now: %lu'
     66726571
     206E6F77
     3A20256C
     75
00C8 00        3406            db 0x00
00C9           3407   
002E           3408            CSEG
002E           3409   
002E           3410   end
